#%RAML 0.8


- opLauncher:
            post:
              securedBy: [oauth_2_0]
              description: |
                SoT.

                Used to start a bulk operation to modify values for a single category.
      
                In the "patch" operation, the request includes some additional values that should be merged in from the root.
                If it all went OK, those new root entries would all be present and identical to the request.
              body:
                application/json:
                  schema: !include ../schemas/categoryValues.json
                  example: !include ../examples/categoryValues-simple.json
              responses:
                201:
                  description: the launch was successful, and the patch is underway
                  body:
                    application/json:
                      schema: !include ../schemas/categoryValueOperationLaunch.json
                      example: !include ../examples/categoryValueOperationLaunch-simple.json
                409:
                  description: Conflict - the producer has an existing, incomplete upload operation for this tenant  - See response in RFC 7807 format for more details.
                  body:
                    application/problem+json:

- usersGetter:
    get:
      is: [ userQueryer ]
      securedBy: [oauth_2_0]
      description: |
        The GET /users APIs return those users that:

        - match the relevant API, e.g. all users, or just currently active users.  
        - if keywords are specified, that match the keywords
        - if one of the filter date parameters (e.g. gtLastUpdateDate) is specified, that have that date (a) not null and (b) < or > given date
        - if ltID or gtID is specified, that have id < or > ID

        When no filter date is specified, results are ordered by job ID asc (if ltID is specified, by job ID desc) 
        
        When a filter date (i.e., gtXDate or ltXDate) is specified, results are ordered by that date (asc or desc), and then by job ID asc or desc as above.

        A maximum of [limit] users will be returned by a single call to the API. If this maximum number is returned, the client should
        fetch again, this time filtering by the ID and date from the last fetched user, as there may be more results.

      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/usersRead.json
              example: !include ../examples/usersRead-manager.json

- userGetter:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get details for this user.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/userRead.json
              example: !include ../examples/userRead-simple.json

- jobGetter:
    get:
      securedBy: [oauth_2_0]
      description: |
        The GET /jobs/byID/{} APIs return details for a job that matches the relevant API, e.g. must be open.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/jobRead.json
              example: !include ../examples/jobRead-simple.json

- jobsGetter:
    get:
      is: [ jobQueryer ]
      securedBy: [oauth_2_0]
      description: |
        The GET /jobs APIs return those jobs that:

        - match the relevant API, e.g. all jobs, or just jobs currently available to external candidates  
        - if a categoryFilter is specified, that match the filter
        - if keywords are specified, that match the keywords
        - if one of the filter date parameters (e.g. gtPublishDate) is specified, that have that date (a) not null and (b) < or > given date
        - if ltID or gtID is specified, that have id < or > ID

        When no filter date is specified, results are ordered by job ID asc (if ltID is specified, by job ID desc) 
        
        When a filter date (i.e., gtXDate or ltXDate) is specified, results are ordered by that date (asc or desc), and then by job ID asc or desc as above.

        A maximum of [limit] jobs will be returned by a single call to the API. If this maximum number is returned, the client should
        fetch again, this time filtering by the ID and date from the last fetched job, as there may be more results.

      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/jobsRead.json
              example: !include ../examples/jobsRead-simple.json


- applicationPhaseNowPusher:
    post:    
      securedBy: [oauth_2_0]
      description: |
        A request containing a view will be sent for the 'now' case to all listeners whenever an application;
        - enters the phase
        
        An empty request will be sent whenever an application;
        - exits the phase
      
        Non-SoT.

      body:
        application/json:
          schema: !include ../schemas/applicationRead.json
          example: !include ../examples/applicationRead-simple.json
          

- applicationPhaseEverPusher:
    post:    
      securedBy: [oauth_2_0]
      description: |
        A request containing a view will be sent for the "ever" case to all listeners;
        - the first time (only) that an application enters the phase   
            
        Non-SoT.

      body:
        application/json:
          schema: !include ../schemas/applicationRead.json
          example: !include ../examples/applicationRead-simple.json

- applicationMultiGetter:
    get:
      is: [ applicationPager, applicationObjectFilter, applicationStripeFetcher ]    
      securedBy: [oauth_2_0]
      description: |
        This API is used to fetch or query details of 1 to 100 job applications in a single call. 

        You should call this API either:
        - passing the "applications" parameter, to fetch a specific, known set of applications; OR
        - passing some combination of "bucket", "job", "candidate", "since" and "minID" to query an unknown number of applications, filtered to your requirements

        In the second case, the total number of results may exceed the maximum (100) per API call,
        so you will need to paginate the results as follows (results are ordered by since asc, application ID asc):
        - first, call the API passing only your filters (i.e., not the since or minID parameters)
        - if you get back exactly 100 applications, call the API again, but this time setting since and minID paramaters to the values from the last
        application in the previous response
        - repeat the above until less than 100 results are returned (indicating you've fetched the final application)     

        SinceDate is the datelastUpdated for the application.
        
      queryParameters:
        bucket:
          description: if present, only include applications that are currently in this bucket
          type: integer
          required: false
          example: 1003
        interimSparseFlag:
          description: |
            If true, indicates that the response should only include a subset of data. This is an interim feature that will be deprecated in the future,
            when a better mechanism (e.g. GraphQL) is added.  
          type: boolean
          required: false
          example: true
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/applicationsRead.json
              example: !include ../examples/applicationsRead-simple.json
        404:
          description: there are no applications matching the filters

- applicationStripeGetter:
    get:
      is: [ applicationStripeFetcher ]    
      securedBy: [oauth_2_0]
      description: |
        Get all applications identified in the stripe (set of IDs).

        Results are ordered by applicationId asc.

      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/applicationsRead.json
              example: !include ../examples/applicationsRead-simple.json
        404:
          description: at least one application was not found



- applicationPhaseNowGetter:
    get:
      is: [ applicationPager, applicationObjectFilter ]    
      securedBy: [oauth_2_0]
      description: |
        The 'now' APIs return all applications:
        - that are currently in this phase; AND
        - (if since is specified), that most recently entered this phase after the given date; AND
        - (if minID is specified), that have id > minID

        A maximum of 100 applications will be returned by a single call to the API. If this maximum number
        is returned, the client should fetch again, specifying both sinceDate and minID, as there may be more results.
        
        Results are ordered by sinceDate asc, applicationId asc.
        
        sinceDate in this case is the date the application most recently entered the phase.
        
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/applicationsRead.json
              example: !include ../examples/applicationsRead-simple.json
        404:
          description: there are no applications matching the filters

- applicationPhaseEverGetter:
    get:
      is: [ applicationPager, applicationObjectFilter ]    
      securedBy: [oauth_2_0]
      description: |
        The 'ever' APIs return all applications:
        - that have ever been in this phase; AND
        - (if since is specified), that first entered this phase after the given date; AND
        - (if minID is specified), that have id > minID

        A maximum of 100 applications will be returned by a single call to the API. If this maximum number
        is returned, the client should fetch again, specifying both sinceDate and minID, as there may be more results.
        
        Results are ordered by sinceDate asc, applicationId asc.
        
        sinceDate in this case is the date the application first entered the phase.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/applicationsRead.json
              example: !include ../examples/applicationsRead-simple.json
        404:
          description: there are no applications matching the filters


- universalMenuBody:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get the html to display the universal menu.
             
        The app building the page that embeds the universal menu must in its head section pull in the corresponding style sheet,
        javascript, etc. as obtained via separate API call.
        
        SoT.
      responses:
        200:
          body:
            text/html:
              example: some html containing a strip of buttons, using only styles from the headHtml call

- menuedAppInquiry:
    get:
      securedBy: [oauth_2_0]
      description: |
        This API is called to ask an app whether it wants to be displayed in the universal menu for the given context (e.g. for a specific job)
        
        The producing app should decide whether it has anything meaningful to display for this specific context, and if so
        it should return a link, which will be inected into the universal menu. For example, if the context is job 100, then an ATS app likely
        would inject the URL of its job details page for that job.
        
        Apps should not inject themselves in a spammy way (i.e. when they have nothing relevant to this context). The user
        can always get to the app via the storefront, and will find the spammy behaviour annoying, so there is no need to do this.

        Non-SoT.
      responses:
        200:
          description: The app has a link to be injected into the universal menu. 
          body:
            text/plain:
              example: a link
        404:
          description: The app does not want to be injected into the universal menu.


- actionSetupPage:
    get:
      securedBy: [oauth_2_0]
      description: |
        API to get a link to a page hosted by the action's app that the user can use to to set up defaults or values
        for this action - for example, to set the referral amount or limits if the button is for an employee referral program.
        For actions relating to jobs, the setup page can be used to set defaults (at either the global or workflow level) or values
        (at the job level).

        When this page has done its thing, it should signal the containing window via a postMessage call, passing one of the verbs "ok" or "cancel".
        
        Non-SoT, on-behalf (principal == user).
        
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/actionSetupPageDetail.json
              example: !include ../examples/actionSetupPageDetail-simple.json
        404:
          description: |
            There is no setup for this action at this level (i.e. it doesn't need any parameters)                              

- appPanel:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get a panel (purpose-specific small, ebeddable web page) from a single app.

        If the panel changes its size, it can trigger a resize of the iframe in the containing via a postMessage call, passing the verb "resize" and the new width and height.
        
        Non-SoT.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/panel.json
              example: !include ../examples/panel-simple.json
        404:
          description: the app has no panel to provide

- appsPanels:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get an array of all of the panels from all apps.
        
        SoT.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/panelsForApps.json
              example: !include ../examples/panelsForApps-simple.json

- candidateAppAction:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get a single, named action from a single app. Non-SoT.
        
        The producing app might customise the button/control(s), or choose not display it at all e.g.;
        - for an apply button, display that a partial (draft) registration is already underway
        - gray the register button out if candidate logged in and already registered

        *Security considerations*: If the producing app attaches the incoming relayPage paramater to the button's link,
        then it should protect itelf from Open Redirection attacks as described at 
        https://www.owasp.org/index.php/Testing_for_Client_Side_URL_Redirect_(OTG-CLIENT-004).
        
        One approach would be by:
        - attaching an additional digital signature to the link based on the link's other values, including the relayPage
        - verifying when the candidate follows the link that the relayPage has not been tampered with
        
        Another approach would be not putting the relayPage in the link at all, but instead storing it and
        putting a key into the link.
        
        The commonly used approach of whitelisting is not useful as there is no common repository of all of the valid
        domains in use by all apps that a tenant may have installed and that may include this action.

        The default type of the action is 'button'. If the type 'image' is used then the 'imageUri' property is used to specify the location of the image.
      is: [ trackable, hasRelayPage ]
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/action.json
              example: !include ../examples/action-simple.json
        404:
          description: |
            The app has chosen not to render the button. Maybe the object's state prevents the action. Maybe the action is an apply gate and
            the candidate achieved a pass - 404 is considered the same as a pass.

- candidateAppsActions:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get an array which is a rollup of all applicable candidate-facing actions from all apps. SoT.

      is: [ trackable, hasRelayPage ]
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/actionsForApps.json
              example: !include ../examples/actionsForApps-simple.json

- candidateAppPossibleActionsDelta:
    post:
      securedBy: [oauth_2_0]
      description: |
        Alert any app that cares that the set of actions produced by this app has changed. Non-SoT.

- candidateAppPossibleActions:
    get:
      securedBy: [oauth_2_0]
      description: |
        Your app should produce this API to return an array with an element for every different button that your app might ever provide (i.e., the superset of all of
        your app's possible buttons).
        
        Typically this will be called by a coordinating app at significant times, such as after the tenant is rebooted, or after your app has
        signalled a change to its buttons by calling the deltaPings API. That coordinating app can then present all possible buttons to some administrator,
        who can then flip some config switches to dictate which buttons should be shown in different situations.
        
        For example, the customer might want to only show a "refer a friend" button for their sales jobs, not their call center jobs.

        This API is for all possible buttons - at runtime, a different API will be called on your app to ask for actual details (color, label, disabled, etc.)
        of each **actual** button. For example, your app might declare with this API that it produces a "share" button, but then at runtime it might decide
        not to show the "share" button if it sees that the logged in candidate has exceeded some quota for sharing.

        Non-SoT.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/actionProductions.json
              example: !include ../examples/actionProductions-simple.json

- candidateAppsPossibleActions:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get an array which is a rollup of all possible candidate-facing actions from all apps. SoT.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/actionProductionsForApps.json
              example: !include ../examples/actionProductionsForApps-simple.json

- applicationAssessmentsStrip:
    get:
      securedBy: [oauth_2_0]
      is: [ hasRelayPage, applicationStripeFetcher ]
      description: |
        Get the html for the strip of assessments (not started, underway or complete), ready to plug in next to a job applicant.
        
        SoT.
             
        The app building the page that embeds this strip must in its head section pull in style sheet,
        javascript, etc. as obtained via a call to GET /assessments/strips/headHtml.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/assessmentStrips.json
              example: !include ../examples/assessmentStrips-simple.json

- candidateAppsStrip:
    get:
      securedBy: [oauth_2_0]
      is: [trackable, hasRelayPage ]
      description: |
        Get the html for the strip of buttons, ready to plug into a job details page as viewed by the candidate. SoT.
             
        The app building the page that embeds this strip must in its head section pull in style sheet,
        javascript, etc. as obtained via a call to GET /actions/byCandidate/headHtml.
      responses:
        200:
          body:
            text/html:
              example: some html containing a strip of buttons, using only styles from the headHtml call

- itemMetas:
    get:
      securedBy: [oauth_2_0]
      description: Get metadata for all items
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/items.json
              example: !include ../examples/items-metaWithFileUpload.json

- itemMeta:
    get:
      securedBy: [oauth_2_0]
      description: Get metadata for a specific item
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/item.json
              example: !include ../examples/item-metaWithFileUpload.json

- items:
    get:
      securedBy: [oauth_2_0]
      description: Get values and (in some scenarios) metadata, for all items
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/items.json
              example: !include ../examples/items-values.json
      
- item:
    get:
      securedBy: [oauth_2_0]
      description: Get value and (in some scenarios), metadata for a specific item
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/item.json
              example: !include ../examples/item-value.json

- catsget:
    get:
      securedBy: [oauth_2_0]
      description: |
        Fetch list of categories
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/categories.json
              example: !include ../examples/categories-simple.json
    post:
      securedBy: [oauth_2_0]
      description: Create a single category (without any values)
      body:
        application/json:
          schema: !include ../schemas/category.json
          example: !include ../examples/category-simple.json

      
      
      