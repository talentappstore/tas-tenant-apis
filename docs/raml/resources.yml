#%RAML 0.8

- universalMenuBody:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get the html to display the universal menu.
             
        The app building the page that embeds the universal menu must in its head section pull in the corresponding style sheet,
        javascript, etc. as obtained via separate API call.
        
        SoT.
      responses:
        200:
          body:
            text/html:
              example: some html containing a strip of buttons, using only styles from the headHtml call

- menuedAppInquiry:
    get:
      securedBy: [oauth_2_0]
      description: |
        This API is called to ask an app whether it wants to be displayed in the universal menu for the given context (e.g. for a specific job)
        
        The producing app should decide whether it has anything meaningful to display for this specific context, and if so
        it should return a link, which will be inected into the universal menu. For example, if the context is job 100, then an ATS app likely
        would inject the URL of its job details page for that job.
        
        Apps should not inject themselves in a spammy way (i.e. when they have nothing relevant to this context). The user
        can always get to the app via the storefront, and will find the spammy behaviour annoying, so there is no need to do this.

        Non-SoT.
      responses:
        200:
          description: The app has a link to be injected into the universal menu. 
          body:
            text/plain:
              example: a link
        404:
          description: The app does not want to be injected into the universal menu.


- actionSetupPage:
    get:
      securedBy: [oauth_2_0]
      is: [ isSetupPage ]
      description: |
        API to get a link to a page hosted by the action's app that the user can use to to set up defaults or values
        for this action - for example, to set the referral amount or limits if the button is for an employee referral program.
        For actions relating to jobs, the setup page can be used to set defaults (at either the global or workflow level) or values
        (at the job level).
        
        Non-SoT, on-behalf (principal == user).
        
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/actionSetupPageDetail.json
              example: !include ../examples/actionSetupPageDetail-simple.json
        404:
          description: |
            There is no setup for this action at this level (i.e. it doesn't need any parameters)                              

- appPanel:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get a panel (purpose-specific small, ebeddable web page) from a single app. Non-SoT.
      is: [ iframeContained ]
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/panel.json
              example: !include ../examples/panel-simple.json
        404:
          description: the app has no panel to provide

- appsPanels:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get an array of all of the panels from all apps. SoT.
      is: [ iframeContained ]
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/panelsForApps.json
              example: !include ../examples/panelsForApps-simple.json

- candidateAppAction:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get a single, named action from a single app. Non-SoT.
        
        The producing app might customise the button/control(s), or choose not display it at all e.g.;
        - for an apply button, display that a partial (draft) registration is already underway
        - gray the register button out if candidate logged in and already registered

        *Security considerations*: If the producing app attaches the incoming relayPage paramater to the button's link,
        then it should protect itelf from Open Redirection attacks as described at 
        https://www.owasp.org/index.php/Testing_for_Client_Side_URL_Redirect_(OTG-CLIENT-004).
        
        One approach would be by:
        - attaching an additional digital signature to the link based on the link's other values, including the relayPage
        - verifying when the candidate follows the link that the relayPage has not been tampered with
        
        Another approach would be not putting the relayPage in the link at all, but instead storing it and
        putting a key into the link.
        
        The commonly used approach of whitelisting is not useful as there is no common repository of all of the valid
        domains in use by all apps that a tenant may have installed and that may include this action.
        
      is: [ trackable, hasRelayPage ]
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/action.json
              example: !include ../examples/action-simple.json
        404:
          description: |
            The app has chosen not to render any button, even though it possibly could have, i.e. the app knows the action can't be performed,
            probably because of the object's state.

- candidateAppsActions:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get an array which is a rollup of all applicable candidate-facing actions from all apps. SoT.

      is: [ trackable, hasRelayPage ]
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/actionsForApps.json
              example: !include ../examples/actionsForApps-simple.json

- candidateAppPossibleActionsDelta:
    post:
      securedBy: [oauth_2_0]
      description: |
        Alert any app that cares that the set of actions produced by this app has changed. Non-SoT.

- candidateAppPossibleActions:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get an array of all actions that may be produced by a single app. Non-SoT.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/actionProductions.json
              example: !include ../examples/actionProductions-simple.json

- candidateAppsPossibleActions:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get an array which is a rollup of all possible candidate-facing actions from all apps. SoT.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/actionProductionsForApps.json
              example: !include ../examples/actionProductionsForApps-simple.json

- applicationEngagementsStrip:
    get:
      securedBy: [oauth_2_0]
      is: [ hasRelayPage ]
      description: |
        Get the html for the strip of engagements (not started, underway or complete), ready to plug in next to a job applicant.
        
        SoT.
             
        The app building the page that embeds this strip must in its head section pull in style sheet,
        javascript, etc. as obtained via a call to GET /engagements/strips/headHtml.
      queryParameters:
        applications:
          type: integer
          description: |
            A set of application IDs (up to a max of 100) that the strips should be fetched for.
          required: true
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/engagementStrips.json
              example: !include ../examples/engagementStrips-simple.json

- candidateAppsStrip:
    get:
      securedBy: [oauth_2_0]
      is: [trackable, hasRelayPage ]
      description: |
        Get the html for the strip of buttons, ready to plug into a job details page as viewed by the candidate. SoT.
             
        The app building the page that embeds this strip must in its head section pull in style sheet,
        javascript, etc. as obtained via a call to GET /actions/byCandidate/headHtml.
      responses:
        200:
          body:
            text/html:
              example: some html containing a strip of buttons, using only styles from the headHtml call

- itemMetas:
    get:
      securedBy: [oauth_2_0]
      description: Get metadata for all items
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/items.json
              example: !include ../examples/items-metaWithFileUpload.json

- itemMeta:
    get:
      securedBy: [oauth_2_0]
      description: Get metadata for a specific item
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/item.json
              example: !include ../examples/item-metaWithFileUpload.json

- items:
    get:
      securedBy: [oauth_2_0]
      description: Get values and (in some scenarios) metadata, for all items
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/items.json
              example: !include ../examples/items-values.json
      
- item:
    get:
      securedBy: [oauth_2_0]
      description: Get value and (in some scenarios), metadata for a specific item
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/item.json
              example: !include ../examples/item-value.json

      
      
      