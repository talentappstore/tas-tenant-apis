#%RAML 0.8
---
title: Aotal recruitment APIs

securitySchemes:  !include securitySchemes.yml
traits: !include traits.yml
resourceTypes: !include resources.yml

/actions:
  /byCandidate:
    /headHtml:
      get:
        description: |
          Get html head snippet (typically an include of a stylesheet) used to style the html for a strip of buttons.
              
          The app building the page that embeds the buttons must insert the results of this API call in its head section.
        responses:
          200:
            body:
              text/html:
                example: some html pulling in stylesheet, javascript etc.
    /me:
      description:
        All APIs beneath here are operating on behalf of the logged in candidate.
      /assessments:
        /general:
          type: candidateAppsActions
        /forApplication:
          /{application}:
      /general:
        type: candidateAppsActions
        /asHtml:
          type: candidateAppsStrip
          is: [ hasPurposeFilter ]
        /byName:
          /{action}:
            /byApp:
              type: candidateAppAction
      /jobs:
        /{job}:
          type: candidateAppsActions
          /asHtml:
            type: candidateAppsStrip
          /byName:
            /{action}:
              /byApp:
                type: candidateAppAction
      /search:
        type: candidateAppsActions
        /asHtml:
          type: candidateAppsStrip
        /byName:
          /{action}:
            /byApp:
              type: candidateAppAction
    /anonymous:
      /assessments:
        /general:
          type: candidateAppsActions
        /forApplication:
          /{application}:
            type: candidateAppsActions
      /general:
        type: candidateAppsActions
        /asHtml:
          type: candidateAppsStrip
          is: [ hasPurposeFilter ]
        /byName:
          /{action}:
            /byApp:
              type: candidateAppAction
      /jobs:
        /{job}:
          type: candidateAppsActions
          /asHtml:
            type: candidateAppsStrip
          /byName:
            /{action}:
              /byApp:
                type: candidateAppAction
          /satisfyLink:
            /{actionName}:
              description: |
                The name of an action button, belonging to the app that is consuming the API, that is to be marked as satisfied by someone following the link.
              get:
                securedBy: [oauth_2_0]
                is: [trackable, hasRelayPage ]
                queryParameters:
                  message:
                    type: string
                    description: |
                      The message that will be displayed to the user on the linked web page, once they have logged in.
                    example: Congratulations! You can apply for this job now.
                    required: true
                  results:
                    type: string
                    description: |
                      The results paramater (if present) is a url encoded json document containing similar data as that
                      an assessment app can set, as per actionSatisfier.json (e.g. image, a url to see the results).
                      
                    required: false
                description: |
                  Obtain a link that a candidate can use to mark themselves as having satisfied the given action button on a job.
                  When the candidate follows this link, they will be asked to sign in, then marked as having satisfied the pre-reqs for the
                  given purpose (e.g. applying for a job), and then shown the message, along with a link to get back to where they started.

                  SoT.
                responses:
                  200:
                    body:
                      text/plain:
                        example: https://acme.prequalify.com/jobs/10032?secret=87686kjhkg78587ykjh
              
      /search:
        type: candidateAppsActions
        /asHtml:
          type: candidateAppsStrip
        /byName:
          /{action}:
            /byApp:
              type: candidateAppAction
    /general:
      description: |
        General actions seen by candidates are typically embedded in page headers, e.g. "register", "share this entire site", etc.
      /possibles:
        type: candidateAppsPossibleActions
        /byApp:
          type: candidateAppPossibleActions
          /deltaPings:
            type: candidateAppPossibleActionsDelta
    /job:
      description: |
        Job-level actions seen by candidates are typically embedded in job details pages, e.g. "apply", "share this job", etc.
      /possibles:
        type: candidateAppsPossibleActions
        /byApp:
          type: candidateAppPossibleActions
          /byName:
            /{action}:
              /{uiMode}:
                description: |
                  The setup page uses uiMode to understand whether the user is at a point in the UI where they are:
                  
                  - *view*: viewing setup details
                  - *edit*: editing setup details
                  
                  In all cases the app should apply its own security to decide whether the user is actually allowed to view/edit, this
                  value is just a hint to make the setup page work smoothly in conjunction with the "edit mode" as set in the containing UI.
                /{internal}:
                  description: true if the setup page is setting up details for internal candidates, or false for externals 
                  /setupPage:
                    description: setup page for default values, that will affect all jobs (unless overridden at workflow level or on the job itself) 
                    type: actionSetupPage
                    /forWorkflow:
                      /{workflow}:
                        description: setup page for default values that will affect all jobs of the given workflow, unless overridden on the job itself 
                        type: actionSetupPage
                    /forJob:
                      /{job}:
                        description: setup page for values that affect only this job 
                        type: actionSetupPage
          /deltaPings:
            type: candidateAppPossibleActionsDelta
    /search:
      description: |
        Search-scoped actions seen by candidates are typically embedded in job search results pages, e.g. "tell me when new jobs like this arrive", etc.
      /possibles:
        type: candidateAppsPossibleActions
        /byApp:
          type: candidateAppPossibleActions
          /deltaPings:
            type: candidateAppPossibleActionsDelta

/advertisements:
  /byApp:
    post:
      securedBy: [oauth_2_0]
      description: Produced by a Job Board App to post a new advertisement to that Job Board. Non-SoT.
      body:
        application/json:
          schema: !include ../schemas/advertisementWrite.json
      responses:
        200:
          description: the post was successful, and the created advertisementRead is returned
          body:
            application/json:
              description: details about the advertisement that has been submitted
              schema: !include ../schemas/advertisementRead.json
  /byID:
    /{advertisementId}:
      /byApp:
        get:
          securedBy: [oauth_2_0]
          description: Produced by a Job Board App to allow the Job Board Hub to fetch the advertisement details. Non-SoT.
          responses:
            200:
              description: Advertisement read that contains all the advertisement information
              body:
                application/json:
                  description: details about the advertisement with the specified ID
                  schema: !include ../schemas/advertisementRead.json
        patch:
          securedBy: [oauth_2_0]
          description: Produced by a Job Board App to allow the Job Board Hub to update or expire an advertisement. Non-SoT.
          body:
            application/json:
              schema: !include ../schemas/advertisementPatch.json
          responses:
            200:
              description: Advertisement read that contains all the advertisement information
              body:
                application/json:
                  description: details about the advertisement with the specified ID and the updated information
                  schema: !include ../schemas/advertisementRead.json
  /status:
    /byApp:
      post:
        securedBy: [oauth_2_0]
        description: Produced by a Job Board App to allow the Job Board Hub to post through IDs of advertisements to find out the status of the specified advertisements. Non-SoT.
          body:
            application/json:
              schema: !include ../schemas/advertisements.json
          responses:
            200:
              description: Advertisement status objects that contains the current status of the advertisement
              body:
                application/json:
                  description: details about the advertisements from the advertisements IDs passed through
                  schema: !include ../schemas/advertisementStatusMetas.json


/applications:
  type: applicationMultiGetter

  /byID:
    /{application}:

      patch:
        description: |
          Consumed by an app, e.g. an ATS front end, to update an application, e.g. move it to a new bucket.
        body:
          application/merge-patch+json:
            schema: !include ../schemas/applicationPatch.json
            example: !include ../examples/applicationPatch-simple.json
        responses:
          200:
            description: the update was successful
                      
      /deltaPings:
        post:
          securedBy: [oauth_2_0]
          description: |
            The main ping for any changes to a job application. Noisy, i.e. other apps need to store previous state to work out what has actually changed.
          
            Non-SoT.

          body:
            application/json:
              schema: !include ../schemas/deltaPing.json
              example: !include ../examples/deltaPing-simple.json
          
      /bucket:
        /{bucket}:
          description: The id of the application's new bucket 
          /deltaPings:
            post:
              securedBy: [oauth_2_0]
              description: |
                Consumed by something like an ATS when an application has changed its bucket. Noise-free, i.e. when fired we
                know the application has changed bucket.
              
                Non-SoT.
               
      /bySourcingApp:
        /deltaPings:
          post:
            securedBy: [oauth_2_0]
            description: |
              A non-SoT API for pings about applications, but which is only sent to the application that sourced the
              application (i.e., that owns the campaign tracker attached to the application).
      /items:
        description: all items held on an application
        type: itemPackagesRead
        get:
          is: [ offerEmbedMeta ] 
        /byName:
          /{item}:
            type: itemPackageRead
            get:
              is: [ offerEmbedMeta ]
        /itemMetas:
          description: |
            Metadata for items held on the candidate
          type: itemMetas
          /byName:
            /{item}:
              type: itemMeta
  /bySourcingApp:
    /{consumer}:
      /{id}:
        /sourcerDetails:
          get:
            securedBy: [oauth_2_0]
            description: |
              Get a sanitised and basic set of information for a job application, which the consumer is entitled to
              by virtue of sourcing the application (i.e., owning the campaign tracker attached to the application).
  /views:
    description: |
      A view is a curated package of information about an application and its job, candidate, etc.
      
      The tenant controls what data appears in a view. This allows them to e.g. only share the minimum amount of data with
      an app. For example, an onboarding app might need details of the applicant's salary, whereas a survey app might
      only need to know their email address.
    /at:
      description: |
        These "at" APIs provide access to applications based on the phase of the recruitment process that they are in now, or have
        ever been in. An application's phase is determined by its bucket (every bucket is linked to a single phase). In these descriptions:
        - "entering a phase" means that an application has transitioned into a bucket of that phase,
        from a bucket of some other phase (or from initial creation) - i.e. moving between buckets of the same phase has no effect on these APIs
        - "exiting a phase" means that an application has transitioned out of a bucket of this phase into a bucket of some other phase.
      
      /new:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
      /screening:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
      /interview:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
      /selection:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
      /offer:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
      /approval:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
      /hire:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
      /onboard:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
      /decline:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
      /other:
        /now:
          type: applicationPhaseNowGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseNowPusher
        /ever:
          type: applicationPhaseEverGetter
          /byID:
            /{application}:
              /pushes:
                type: applicationPhaseEverPusher
    /byApplication:
      /{application}:
        /byViewType:
          /{viewType}:
            post:
              description: |
                Ask the view holding app to create a view instance of the given view type for this application. The response includes the key
                of the newly created view instance.
              responses:
                200:
                  body:
                    application/json:
                      schema: !include ../schemas/viewMeta.json
                      example: !include ../examples/viewMeta-simple.json
    /byKey:
      /{key}:
        get:
          description: |
            Get the previously created view instance.
          responses:
            200:
              body:
                application/json:
                  schema: !include ../schemas/applicationRead.json
                  example: !include ../examples/applicationRead-simple.json
               
  /viewTypes:
    get:
      description: |
        Get a list of all available view types (i.e. pre-defined sets of information about an application)
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/applicationViewTypes.json
              example: !include ../examples/applicationViewTypes-simple.json

/appStatus:
  get:
    securedBy: [oauth_2_0]
    is: [ hasRelayPage ]
    description: |
      Produced by apps to inform the storefront app of this app's:
      - landing page, i.e where should the user go to do on clicking "open" on the app - e.g. clicking a job board app might go to the front page of the job board
      - setup required status, i.e. whether the app is degraded or unusable due to some missing setup
      - setup page, i.e. where should the user go to adjust the app's setup   
      
      Probably only consumed by storefront apps.
      
      SoT: non-SoT (each app has their own landing page).

      When the app is generating the setup page url, the relayPage parameter indicates where the user should be redirected to after completing
      the setup (i.e. typically the app details page witin the storefront).

    responses:
      200:
        body:
          application/json:
            schema: !include ../schemas/appStatus.json
            example: !include ../examples/appStatus-simple.json

/assessments:
  /strips:
    /me:
      description: These APIs are on behalf, allowing the identity of the user raising the assessment to be available to the hub.
      /forApplications:
        /asHtml:
          type: applicationAssessmentsStrip
    /headHtml:
      get:
        description: |
          Get html head snippet (typically an include of a stylesheet) used to style the html for the assessments strip.
              
          The app building the page (e.g. applicant list) that embeds assessment strips must insert the results of this API call in its head section.
          
          The head HTML API pulls in a function initializeSearchWidget() that the ATS can call, passing a single object with these fields:
          - String tenant
          - Number bucket
          - HTMLElement sortWidget (an empty DOM element that the hub will put the sort control widget in)
          - Number currentSort (indicates the assessment type currently being sorted on, so the sort control can render itself)
          - Boolean currentSortAsc (is the current sort asc or desc?)
          - Number job (the job the ATS is displaying applicants for)
          - Function callback (callback function that the hub will use to notify the ATS when a sort is requested). The callback takes params:
              - Number assessmentType (to sort by)
              - Boolean sortAsc (whether to sort asc or desc)
          
        responses:
          200:
            body:
              text/html:
                example: some html pulling in stylesheet, javascript etc.
    /byAssessmentType:
      /{assessmentType}:
        /forApplications:
          /fetches:
            post:
              securedBy: [oauth_2_0]
              description: |
                An app such as an ATS calls this on an app such as the assessment hub to convert a set of application IDs into a sorted set.
                
                If there are no assessments the result is 200 with an empty array.
              body:
                application/json:
                  schema: !include ../schemas/ids.json
                  example: !include ../examples/ids-simple.json
              responses:
                200:
                  body:
                    application/json:
                      schema: !include ../schemas/assessmentsSort.json
                      example: !include ../examples/assessmentsSort-fromHub.json
  /byApplication:
    /{application}:
      /byAssessmentType:
        /{assessmentType}:
          get:
            description: get details of this assessment, reflecting changes made by the app and/or the tenant. 
            responses:
              200:
                body:
                  application/json:
                    schema: !include ../schemas/assessmentRead.json
                    example: !include ../examples/assessmentRead-created.json
          post:
            description: |
              Tenant creates (or reuses) an assessment of the given type, for the given job application,
              for example upon a candidate applying and being screened in.
              
              SoT. Typically implemented by the assessment hub.

              There is no request body. The response contains the assessment ID.
              
            responses:
              200:
                description: the post was successful, and an existing assessment was reused.
                body:
                  application/json:
                    description: details about the reused assessment
                    schema: !include ../schemas/assessmentMeta.json
                    example: !include ../examples/assessmentMeta-simple.json
              201:
                description: the post was successful, and a new assessment was created.
                body:
                  application/json:
                    description: details about the newly created assessment
                    schema: !include ../schemas/assessmentMeta.json
                    example: !include ../examples/assessmentMeta-simple.json
          /me:
            post:
              description: |
                Tenant creates (or reuses) an assessment of the given type, for the given job application,
                for a logged in user, who will appear in the raisers section of the assessment. This is an
                on-behalf version of the similar API (without /me).
              
                SoT. Typically implemented by the assessment hub.

                There is no request body. The response contains the assessment ID.
              
              responses:
                200:
                  description: the post was successful, and an existing assessment was reused.
                  body:
                    application/json:
                      description: details about the reused assessment
                      schema: !include ../schemas/assessmentMeta.json
                      example: !include ../examples/assessmentMeta-simple.json
                201:
                  description: the post was successful, and a new assessment was created.
                  body:
                    application/json:
                      description: details about the newly created assessment
                      schema: !include ../schemas/assessmentMeta.json
                      example: !include ../examples/assessmentMeta-simple.json
                    
  /byID:
    /{id}:
      get:
        description: get details of this assessment, reflecting changes made by the app and/or the tenant. 
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/assessmentRead.json
                example: !include ../examples/assessmentRead-created.json
      /appDetails:
        patch:
          description: |
            Consumed by the assessment app to update an existing assessment using JSON Merge Patch semantics (https://tools.ietf.org/html/rfc7396).
            Apps may set most details and some statuses for an assessment, but cannot alter the on hold flag.
          body:
            application/merge-patch+json:
              schema: !include ../schemas/assessmentWriteByApp.json
              example: !include ../examples/assessmentWriteByApp-completed.json
          responses:
            200:
              description: the update was successful
      /tenantDetails:
        patch:
          description: |
            Consumed by the assessment hub, as a result of some tenant action, to update an existing assessment
            using JSON Merge Patch semantics (https://tools.ietf.org/html/rfc7396).
            The tenant cannot alter many details of an assessment other than to change the status.
          body:
            application/merge-patch+json:
              schema: !include ../schemas/assessmentWriteByTenant.json
          responses:
            200:
              description: the update was successful
      /tenantDeltaPings:
        post:
          securedBy: [oauth_2_0]
          description: |
            Alerts listeners to a change to an assessment caused by the tenant
          body:
            application/json:
              schema: !include ../schemas/deltaPing.json
              example: !include ../examples/deltaPing-simple.json
  /sorts:
    post:
      securedBy: [oauth_2_0]
      description: |
        An app such as the assessment hub calls this on the assessment app that owns these assessments, to have them sorted.
      body:
        application/json:
          schema: !include ../schemas/ids.json
          example: !include ../examples/ids-assessments.json
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/assessmentsSort.json
              example: !include ../examples/assessmentsSort-fromApp.json

/assessmentTypes:
  get:
    securedBy: [oauth_2_0]
    description: |
      Get the list of all assessment types produced by all assessment apps.
        
      SoT.
    responses:
      200:
        body:
          application/json:
            schema: !include ../schemas/assessmentTypes.json
            example: !include ../examples/assessmentTypes-simple.json
  /byID:
    /{id}:
      get:
        securedBy: [oauth_2_0]
        description: |
          *This API is deprecated in favour of the key field returned by GET /assessments/byID/{} and will shortly be removed.*

          Get details of a single assessment type, by ID. The response is an array containing a single type. Typically used
          by the assessment hub's UI when rendering details about assessments about to be created, or that already exist. 

          Even when an assessment type has been deleted (i.e., is no longer passed by the assessment app) it will still
          be returned by this API, but with activeFlag set to false.  
                  
          SoT.
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/assessmentTypes.json
                example: !include ../examples/assessmentTypes-simple.json
          404:
            description: no assessment type with that ID exists
      
  /forApp:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get the list of assessment types produced by an assessment app.
        
        Non-SoT.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/assessmentTypesForApp.json
              example: !include ../examples/assessmentTypesForApp-simple.json
    /byKey:
      /{key}:
        /launcher:
          /forApplication:
            /{application}:
              get:
                description: |
                  Get the url for the assessment type's launcher UI. The UI may adapt itself based on job and/or candidate, e.g. to ask less
                  of internal candidates. Or it could ignore the application ID and just present its generic UI.

                responses:
                  200:
                    description: the assessment type **does** have a setup UI to present to the user
                    body:
                      text/plain:
                        description: |
                          The url of the assessment type's launch (i.e. setup) UI. The resulting page should
                          fire a postMessage from to communicate the launch document back to the container.
                          
                          **TODO** clarify syntax. 
                        example: https://myapp.com/launch/1003443455.html
                  404:
                    description: |
                      The assessment type **does not** have a setup UI to present to the user in this case
                  
    /deltaPings:
      post:
        securedBy: [oauth_2_0]
        description: |
          *This API is deprecated in favour of POST /assessmentTypes/forApp/deltaPings/1 and will shortly be removed.*
          
          Consumed by an assessment app to alert any interested parties that the list
          of assessment types produced by the app has changed.
        
          Non-SoT (there may be many listeners).
      /1:
        post:
          securedBy: [oauth_2_0]
          description: |
            Consumed by an assessment app to alert any interested parties that the list
            of assessment types produced by the app has changed.
        
            SoT.
  /me:
    /forJob:
      /byID:
        /{job}:
          get:
            queryParameters:
              bucket:
                description: only include assessment types that are visible to the user for applicants in the given bucket
                type: integer
                required: true
                example: 1003
            description: |
              Get the list of assessment types that are visible to this user, for applicants for this job and in this bucket. This can be used e.g. to populate a
              sorting widget - in it the user could click on a sortable assessment type to sort the applicants.
            responses:
              200:
                body:
                  application/json:
                    schema: !include ../schemas/assessmentTypeVisibles.json
                    example: !include ../examples/assessmentTypeVisibles-simple.json

/buckets:
  get:
    responses:
      200:
        body:
          application/json:
            schema: !include ../schemas/buckets.json
            example: !include ../examples/buckets-simple.json
  /byID:
    /{bucket}:
      get:
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/bucket.json
                example: !include ../examples/bucket-simple.json
      /deltaPings:
        post:
          securedBy: [oauth_2_0]
          description: |
            The main ping for any changes to a bucket. Noisy, i.e. other apps need to store previous state to work out what has actually changed.
            
            Non-SoT.

          body:
            application/json:
              schema: !include ../schemas/deltaPing.json
              example: !include ../examples/deltaPing-simple.json

/candidates:
  description:
    Candidates are people who are in the tenant's talent world, perhaps stored in their ATS.
    Maybe they applied for an opening, registered in the database, were imported from some other system, etc.
  post:
    is: [ badrequest ]
    description: 
      This API has the same behaviour as POST /candidates/me, except that the call is not on behalf.
    body:
      application/json:
        schema: !include ../schemas/candidateEdit.json
        example: !include ../examples/candidateEdit-simple.json
    responses:
      200:
        description: the post was successful
      201:
        description: the post was successful
  /unvalidated:
    post:
      is: [ badrequest ]
      description: 
        This API has the same behaviour as POST /candidates/me/unvalidated, except that the call is not on behalf.
      body:
        application/json:
          schema: !include ../schemas/candidateEdit.json
          example: !include ../examples/candidateEdit-simple.json
      responses:
        200:
          description: the post was successful
        201:
          description: the post was successful
  /me:
    description:
      All APIs beneath here are operating on behalf of the logged in candidate.
    get:
      description: |
        Get the signed in candidate's details
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/candidateRead.json
              example: !include ../examples/candidateRead-simple.json
      
    post:
      securedBy: [oauth_2_0]
      is: [ badrequest ]
      description: |
      
        **Overview**
      
        These "apply APIs" are used by an apply app to create or update a candidate in the ATS (depending on whether one exists with a matching email),
        and optionally create a job application.

        There are 4 versions of the apply APIs:

        - POST /candidates
        - POST /candidates/unvalidated
        - POST /candidates/me
        - POST /candidates/me/unvalidated

        The /me (on behalf) versions of these APIs are strongly preferred for security and the best candidate experience. They require that the candidate is signed in via SSO.

        The non-/unvalidated versions of these APIs are also preferred whenever possible. The /unvalidated versions should be used only if its not possible to answer
        all of the customer's mandatory questions.

        **Preparing to call the APIs**

        Before calling this API, the apply app will usually make an API call to fetch the edit spec (i.e. details of the application form) from the ATS.

        The apply app uses this to build up an application form and show it to the candidate.

        Once the candidate has completed the application form, the apply app uses one of these apply APIs to push the candidate data and job applications into the ATS.

        **Update semantics**

        When updating, merge patch semantics are used (https://tools.ietf.org/html/rfc7386). For example;
        - if resume is present in the request, it will be set
        - if present and null, any existing resume will be cleared
        - if not present, any existing resume will be left unchanged

        **Internal candidates**

        The API calls can set or update the candidate's internalFlag (i.e. indicating they are an employee).

        The /me versions of the APIs do this by checking for the "internal" role in the incoming SAML assertion. If present, the
        candidate will be set to have internalFlag = true. If not present, false. The internal flag should not be present in API the request - a 400 error will be thrown if it is.

        For the non-/me versions of the APIs, the ATS should just examine the candidate's internal flag in the request.
        - if present and true then the candidate is set to internalFlag == true
        - if present and true then the candidate is set to internalFlag == false
        - if not present, then when creating, the internalFLag will be set to false, and when updating no change will be made

        **Fields duplicated in the vcard**

        Within the person object, some fields - e,g, email, first name, last name - are duplicated, i.e. they appear both as a first class field, and also within the vcard. In the
        API request, either can be used to set the underlying value;
        - The underlying value will be set to whichever is not null
        - If both are null, the underlying value will be set to null
        - If both are not null and they clash, a 400 error will be thrown

        **Category values**

        When the API request contains the categories object, and there is a category present (e.g. Location), then the the candidate will be updated to exactly match the category values.

        Any categories not passed in will not be changed on the candidate.

        **Checking eligibility to apply**

        When the API request includes an job application, the ATS should check that the job is active, AND that one of the following is true;

        - if the job is "open to externals", that the candidate is external
        - if the job is "open to internals", that the candidate is internal
        - if neither, that a tracker chain was passed in that has a campaign tracker for this job and with correctly matching access code

        If the job is not active or none of the above are true, then the API will return 400 and no changes will be made.

        **File checks**
  
        The ATS must run all uploaded files through OWASP security tests:
        - extension matches actual file type
        - virus check
        - etc.

        **Validation**

        The ATS (app producing the API) must not blindly apply the incoming data. Instead it must itself first generate an editSpec for the candidate, and then check that
        the incoming data is a subset of what the editSpec allows/requires. This prevents attacks where e.g. the apply app tries to write to a random item. This checking must happen
        in both the normal and the /unvalidated forms of the APIs.

        The ATS must also check that the apply app has passed the resume (if mandatory) and any mandatory data items. The /unvalidated versions of the
        APIs don't perform these mandatory checks.

      body:
        application/json:
          schema: !include ../schemas/candidateEdit.json
          example: !include ../examples/candidateEdit-simple.json
      responses:
        200:
          description: the post was successful
        201:
          description: the post was successful
    /unvalidated:
      post:
        is: [ badrequest ]
        description: |
          This API has the same behaviour as POST /candidates/me, except that mandatory items may be missing.
        body:
          application/json:
            schema: !include ../schemas/candidateEdit.json
            example: !include ../examples/candidateEdit-simple.json
        responses:
          200:
            description: the post was successful
          201:
            description: the post was successful
            
    /details:
      get:
        securedBy: [oauth_2_0]
        description: |
          *This API is deprecated in favour of GET /candidates/me and will shortly be removed.*
        
          Get general information about the candidate including notifications (subscribe y/n)
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/candidateDetails.json
                example: !include ../examples/candidateDetails-simple.json
    /homePage:
      get:
        securedBy: [oauth_2_0]
        is: [ hasRelayPage ]
        description: |
          Get the uri of the home page, a landing page where a logged in candidate can see anything they should know about or should do, e.g.
          the status of their job application, assessments they still haven't completed, etc. Often produced by an ATS.

          Details of a relayPage can be passed in when the home page was reached as part of some activity. e.g. candidate applies for job and after submission is redirected
          to the home page, e.g. so they can complete any auto-started assessments. Passing the relayPage of the job (where they clicked Apply) causes navigation
          link "Back to Creative Director" to be displayed at the top of the candidate home page. 
                    
          SoT. There is only one home page to send the candidate to.
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/homePage.json
                example: !include ../examples/homePage-simple.json

    /id:
      description: |
        *This API is deprecated in favour of GET /candidates/me and will shortly be removed.*
        
        The ID of the candidate.
      get:
        securedBy: [oauth_2_0]
        description: |
          Get the ID (database primary key) of ourselves (the currently logged in principal, who must be of principal type 'candidate').
    /vcard:
      get:
        is: [ vcardGetter ]
    /resume:
      /meta:
        get:
          is: [ resumeMetaGetter ]
      /asDocument:
        get:
          securedBy: [oauth_2_0]
          is: [ document_asStream ]
      /asHtml:
        get:
          securedBy: [oauth_2_0]
          description: get an html version of the candidate's resume
        /deltaPings:
          description: |
            A separate delta ping from the main candidate one, since managing the html version may be done delayed by a downstream app.
            Probably only useful as non-SoT.
          post:        
            securedBy: [oauth_2_0]
    /categories:
      get:
        securedBy: [oauth_2_0]
        description: |
          *This API is deprecated in favour of GET /candidates/me and will shortly be removed.*
        
          Get the categories for this candidate
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/categoriesActual.json
                example: !include ../examples/categoriesActual-simple.json
      /merges:
        post:
          securedBy: [oauth_2_0]
          description: |
            Perform a normalized merge of the candidate's category values with the passed in values, and return the result. The candidate
            is not altered. We use a POST to allow passing a request body.
            
            By normalizing we mean that:
            - any folder or leaf must be included (explicitly or implicitly) only once
            - the minimum possible number of folders and leaves should be included

            e.g. given an example tree like this:

            ````
            /a
              /b
                /d
                /e
              /c
                /f
            /g
              /h
              /i
            ````
  
            The following are correctly normalized:

            ````
            /a
            /b,/f
            /a,/h
            ````

            The following are not:

            ````
            /b,/c (since /a would be more minimal)
            /a,/b (since /a already implies /b)
            /d,/e (since /b would be more minimal) 
            /f (since /c would be more minimal) 
            ````
            
          body:
            application/json:
              schema: !include ../schemas/categoriesActual.json
              example: !include ../examples/categoriesActual-simple.json
          responses:
            200:
              body:
                application/json:
                  schema: !include ../schemas/categoriesActual.json
                  example: !include ../examples/categoriesActual-simple.json
    /latestApplyTracker:
      get:
        securedBy: [oauth_2_0]
        description: |
          The tracker (if any) that was passed in when this candidate last applied for a job (i.e. a call to POST /candidates
          was made with a job specified). When a candidate applies for multiple jobs over time, this helps understand what last
          drew them to the site.
    /applications:
      get:
      /{application}:
        /source:
          get:
            securedBy: [oauth_2_0]
            description: a tracker, as passed in to the edit
    /social:
      /{network}:
        /candidate:
          get:
            is: [ vcardGetter, socialGetter ]
        /resume:
          /meta:
            get:
              is: [ resumeMetaGetter, socialGetter ]
          /asDocument:
            get:
              securedBy: [oauth_2_0]
              is: [ document_asStream, socialGetter ]

    /items:
      /forJob:
        /{job}:
          description: all application-scoped items held for when a candidate applies to a job
          type: itemPackagesRead
          get:
            is: [ offerEmbedMeta ] 
              
  /byID:
    /{candidate}:
      /items:
        description: all items held on a candidate
        type: itemPackagesRead
        get:
          is: [ offerEmbedMeta ] 
        /byName:
          /{item}:
            type: itemPackageRead
            get:
              is: [ offerEmbedMeta ]
        /itemMetas:
          description: |
            Metadata for items held on the candidate
          type: itemMetas
          /byName:
            /{item}:
              type: itemMeta
      /resume:
        /asDocument:
          get:
            securedBy: [oauth_2_0]
            is: [ document_asStream ]
      /stars:
        /forJobs:
          /{job}:
            get:
              securedBy: [oauth_2_0]
              description: Get the candidate's stars against a specific job, perhaps inherited from the jobs's master or some talent pool
      /deltaPings:
        description: |
          The main ping for any changes to a candidate, other than the html resume, which has its own delta ping.
          Only produced as non-SoT.
        post:
          securedBy: [oauth_2_0]
  /recruiterFaces:
    /searches:
      post:
        securedBy: [oauth_2_0]
        description: |
          Search candidates, returning recruiter-facing details.
          The method is a POST solely because the size and number of parameters might get too large for a GET.
          withResume - if present, only return candidates with (if true) or without (if false) an attached resume
        body:
          application/json:
            schema: !include ../schemas/candidates.json
            example: !include ../examples/candidates-simple.json
    /{id}:
      get:
        securedBy: [oauth_2_0]
        description: |
          Return recruiter-facing details for a specific candidate. e.g do not contact flag


/careerSites:
  description: |
    Career sites are web portals showing jobs that exist inside the tenant, as opposed to job boards, which live outside the tenant.
    
  get:
    securedBy: [oauth_2_0]
    description: |
      A rollup of the details of all careers sites produced by all apps. SoT.
    responses:
      200:
        body:
          application/json:
            schema: !include ../schemas/careerSitesForApps.json
            example: !include ../examples/careerSitesForApps-simple.json
  /forApp:
    get:
      securedBy: [oauth_2_0]
      description: |
        Descriptions of one or more careers sites hosted by a specific app. Non-SoT.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/careerSites.json
              example: !include ../examples/careerSites-simple.json
    /byID:
      /{site}:
        /jobLinks:
          get:
            is: [ jobStripeFetcher, trackable ]    
            securedBy: [oauth_2_0]
            description: |
              Convenience API to generate links to a set of jobs at a given career site.
              
              Non-SoT.
            responses:
              200:
                body:
                  application/json:
                    schema: !include ../schemas/jobLinks.json
                    example: !include ../examples/jobLinks-simple.json

        /jobLink:
          /{job}:
            get:
              securedBy: [oauth_2_0]
              is: [trackable ]
              description: |
                *This API is deprecated in favour of GET /careerSites/forApp/byID/{site}/jobLinks and will shortly be removed.*
                
                Convenience API to generate a link to a specific job at a given career site. 

                Non-SoT.
              responses:
                200:
                  body:
                    text/plain:
                      example: https://acme.bigboard.com/jobs/10032-Creative-Director-looking-for-next-challenge
        /jobSearchLink:
          get:
            is: [ jobQueryer ]
            securedBy: [oauth_2_0]
            description: |
              This API is used to generate a link to a page of search results (e.g. all Finance jobs) on a career site.

              See the description of e.g. GET /jobs/all for details of search parameters and pagination techniques.
            responses:
              200:
                body:
                  text/plain:
                      
  /primary:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get details for whichever career site which has been marked as the primary by the tenant. SoT.
        
        The response is the same as for GET /careerSites, except that only the board which has been marked as the
        primary is included in the results.
        
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/careerSitesForApps.json
              example: !include ../examples/careerSitesForApps-primary.json
      

/categories:
  description: |
    Tenant-defined hierarchical structures used in talent management to categorize job openings, candidates
    and others. Includes details of inactivated nodes.

  /deltaPings:
    post:
      securedBy: [oauth_2_0]
      description: |
        The main ping for any changes to the categories. Useful e.g. to replicate categories into a database without polling.  
          
        Non-SoT.
    
  type: catsget
    
  /byID:
    /{category}:
      description: category ID 

      post:
        securedBy: [oauth_2_0]
        description: Update a single category, not including its values
        body:
          application/json:
            schema: !include ../schemas/category.json
            example: !include ../examples/category-simple.json
            
      delete:
        securedBy: [oauth_2_0]
        description: Delete a category, along with all of its values

      /deltaPings:
        post:
          securedBy: [oauth_2_0]
          description: |
            Sent to alert any listening apps that a change has been made to this category or one or more of its values. The listeners
            then know to call GET /categories, GET /categories/byID/{}/values to get the latest data.
        
      /values:
        get:
          securedBy: [oauth_2_0]
          is: [ badrequest ]
          description: |
             Get root values and the hierarchy of values beneath. Only available nodes are returned.
          responses:
            200:
              body:
                application/json:
                  schema: !include ../schemas/categoryValues.json
                  example: !include ../examples/categoryValues-simple.json
        post:
          securedBy: [oauth_2_0]
          description: |
            Create or update a single category value. The category value must not contain the values element.

            Data integrity rules for category values
            ==========
            400 must be thrown if the consumer violates any of these:
  
            - No parent child loops can exist (e.g. setting the parent of a node to one of its own grandchildren would not be allowed)
            - Inactive values must always be at the root (no parent), and cannot have children (i.e. they must not be in a hierarchy)
            - The remappedTo field can only be set (non-null) at the same time a node is inactivated.
            - At the time that remappedTo is set, it must refer to an active node.
            - External ID (unless null) must be unique among all values in a single category (active or not), immutable and never reused.

            When a node is inactivated, all apps must remove all references to it. e.g. when the tenant inactivates (deffectively deletes) the IT node,
            a careers site app would unhook and maybe delete its IT testimonials.      

            Example operations
            ======
            This test data is used throughout.
            
            ````
            [
              {
                "id": 10034,
                "externalID": "a100",
                "parent": null,
                "name": "Wellington",
                "available": false
              },
              {
                "id": 10032,
                "externalID": "a101",
                "parent": null,
                "name": "Auckland",
                "available": true,
                "values": [
                  {
                    "id": 10036,
                    "externalID": "a104",
                    "parent": 10032,
                    "name": "North Shore",
                    "available": true,
                    "values": [
                      {
                        "id": 10037,
                        "externalID": "a105",
                        "parent": 10036,
                        "name": "Takapuna",
                        "available": true
                      }
                    ]
                  }
                ]
              }
            ]
            ````
  
            The request body for the atomic API (POST /categories/byID/{}/values) must only pass a single node. 
            
            This is a valid request to POST /categories/byID/{}/values, and will change the name as well as reparenting the node:
            
            ````
              {
                "id": 10037,
                "parent": 10032,
                "name": "Takapuna/Milford"
              }
            ````
            
            Create vs update
            ----
            The POST operation can create nodes, or can update them as identified by id or external id. There is no delete (just updating the available flag to false).
            
            This request will create a new root node, also named Takapuna:
            
            ````
              {
                "name": "Takapuna"
              }
            
            ````
            
            This will create a new node called Albany, also under the North Shore parent:
            
            ````
              {
                "name": "Albany",
                "parent": 10036
              }
            ````
            
            
            id and external id
            ----
            If id is present, then an exactly matching node must exist. If the request also includes external id, that must match too.  
            
            Either of these are a valid request to update the name of the Takapuna node:
            
            POST /categories/byID/{}/values   
            
            ````
              {
                "id": 10037,
                "name": "Takapuna/Milford"
              }
            ````
            
            ````
              {
                "id": 10037,
                "externalID": "a105",
                "name": "Takapuna/Milford"
              }
            ````
            
            This would give an error, since external id does not match.
            
            ````
              {
                "id": 10037,
                "externalID": "a106",
                "name": "Takapuna/Milford"
              }
            ````
             
            If only external id is present, then if that matches an existing node, that will be an update, otherwise it will be a create.    
             
            e.g. this is a valid request to update the name of the Takapuna node.
            
            ````
              {
                "externalID": "a105",
                "name": "Takapuna/Milford"
              }
            ````
            
            This will create a new node named Takapuna (since there is no existing node a1055).
            
            ````
              {
                "externalID": "a1055",
                "name": "Takapuna/Milford"
              }
            ````
            
            
            Available flag
            ----
            The available flag indicates whether a node can be used going forward - e.g. setting a node to unavailable will
            prevent it being used for new jobs. However old jobs may still use the category value, even if it is unavailable (see remapping). 
            
            By default, available is set to true for new nodes, e.g. this request will create a new, available root node:
            
            ````
              {
                "name": "Singapore"
              }
            ````
  
            
            Remapping nodes
            ----
            When a node is made unavailable, it can be remapped at the same time. This is a hint to apps that anything attached to that node (e.g. jobs)
            should be transferred across to the remap node.
             
            For example, this request retires the Takapuna location, and will cause Takapuna jobs to be transferred to North Shore:   
            
            ````
              {
                "id": 10037,
                "available": false,
                "remappedTo": 1036
              }
            ````
            
            The remappedTo field can only be set at the same time as the node itself is made unavailable (i.e. in the same request). 
  
  
            Race conditions
            -----------
            Wen doing a rapid series of atomic operations on category values, e.g. test scripts, apps should think carefully about race conditions in downstream
            apps that are replicating the category.
            
            For example, your app:
            - makes node 100 unavailable, and at the same time remaps it to node 102
            - a downstream app learns about this via POST /categories/byID/{}/values/byID/{}/deltaPings
            - the downstream app starts transferring its attached objects from 100 to 102
            - in the meantime, your app has already made 102 inactive and remapped to e.g. 103.


          body:
            application/json:
              schema: !include ../schemas/categoryValue.json
              example: !include ../examples/categoryValue-simple.json
              
        /remapped:
          get:
            description: get unavailable and remapped nodes, using a cursor model
          
        /uploads:
          type: categoryValuesUploader
          /byID:
            /{uploadID}:
              description: the ID of a previously launched category values bulk upload
              type: uploadStatusGetter
              /deltaPings:
                type: uploadStatusPinger

        /byID:
          /{id}:
            get:
              securedBy: [oauth_2_0]
              description: get a single category node, even if it is unavailable (i.e. unlike GET /categories/byID/{}/values) 
              responses:
                200:
                  body:
                    application/json:
                      schema: !include ../schemas/categoryValue.json
                      example: !include ../examples/categoryValue-simple.json
                404:

            /deltaPings:
              post:
                securedBy: [oauth_2_0]
                description: Tell any app that cares that a category node has changed. The node's new state is sent in the request.
                body:
                  application/json:
                    schema: !include ../schemas/categoryValue.json
                    example: !include ../examples/categoryValue-simple.json

            /changeImpact:
              post:
                securedBy: [oauth_2_0]
                description: |
                  Tell apps that care that a category node is about to be changed. The node's new state is sent in the request.
                  
                  Each producer can pass back a markdown document rendering to a user what would happen if this change went ahead.
                  e.g. "10 jobs would be deleted - click _here_ to learn more.
                    
                body:
                  application/json:
                    schema: !include ../schemas/categoryValue.json
                    example: !include ../examples/categoryValue-simple.json
                responses:
                  200:
                    body:
                      application/json:
                        schema: !include ../schemas/categoryRelatedData.json
                        example: !include ../examples/categoryRelatedData-change.json
                  404:
                    description: no data available

            /summary:
              get:
                securedBy: [oauth_2_0]
                description: |
                  Ask any apps that care about category nodes what information they are holding relating to this node.
                  
                  Each producer can pass back a markdown document rendering to a user, e.g. an ATS might say "_10_ jobs, _287_ candidates"
                responses:
                  200:
                    body:
                      application/json:
                        schema: !include ../schemas/categoryRelatedData.json
                        example: !include ../examples/categoryRelatedData-summary.json
                  404:
                    description: no data available


/editSpecs:
  description: |
    **Overview**

    The "editspec APIs" allow an apply app to ask the ATS for details of the data the candidate can/must provide - e.g. the job application form
    when applying for a job.
    
    An editSpec can specify for example;
    - whether a resume can be provided, and whether it is mandatory
    - a message to be displayed to the candidate
    - a set of user-defined fields for the candidate
    - a set of user-defined fields that the candidate can/must provide that are specific to the job being applied for

    Later, once the apply app has presented this application form to the candidate, and they have completed it, the apply app can push the candidate
    and job application(s) and related data into the ATS via POST /candidates.

    **Versions of the API**

    There are 4 versions of the editSpecs APIs:

    - POST /editSpecs/fetches/register/me 
    - POST /editSpecs/fetches/apply/{job}/me 
    - POST /editSpecs/fetches/register/anonymous
    - POST /editSpecs/fetches/apply/{job}/anonymous 

    The register versions of the API are for use when the app intends to create or update the candidate, without job applications.  

    The apply versions are for use when the app intends to also create job applications.  

    The /me (on behalf) versions of these APIs are strongly preferred for security and the best candidate experience. They require that
    the candidate is signed in via SSO. With the /me APIs, the application form that a candidate sees can be customised for who they are.
    e.g. an internal candidate might be asked "have you told your manager you're applying for other positions?".

    The non-/me versions can be used when no candidate is signed in. This could be e.g.:
    - because the apply app does not use SSO (batch, import, email gateway etc.)
    - to deal with first time visitors to the career site who click "apply" (we may want to show them what
    the apply experience could be like, without making them sign in at this stage).


    **The intent - category values**

    The apply app can use an **intent** to send category values that hint to the ATS what sort of candidate is about to register, so it can serve
    up a sensible register form.

    e.g. an employer runs a recruitment campaign to drive pilots to their careers site. These potential employees land on a pilot-specific landing page,
    featuring a button "Sign up for pilot careers". When the potential pilot clicks on the button, they will see the register form within the apply app.

    That register form should be customised for pilots - e.g., welcome content for pilots, ask for details of their flight hours on different types of aircraft, etc.

    When it calls the editSpecs API, the apply app makes this happen by passing an intent like this saying "give me the registration form for pilot";

    Expertise->Pilot

    At another example customer, a supermarket opening a new store buys some Facebook advertising in the region. The ads drive candidates to a specific
    landing page. When the candidate clicks to join, the apply app passes an intent like this to the editSpecs API:

    Location->Lincoln Nebraska
    Expertise->Retail
 
    Using this intent, the ATS can now customise the register form - e.g.
    - pre-set the location to Lincoln
    - display content related to Lincoln, Nebraska
    - display tax-, employment-related or EEO questions specific to Lincoln, Nebraska, and also to Retail roles

    Intents are mainly useful for the register APIs. When passed to the apply APIs, the ATS can use both the job being applied
    for, and the intent, to customise the application form.


    **The tracker**

    If the apply app has access to a tracker, it should pass it into the editSpec API (and later, the apply API).

    The tracker can allow the ATS to customise the form. For example when the a candidate was referred via the new employee referral program,
    the employer can ask additional/less questions.  


    **Accessing the editSpec for invisible jobs**

    When the job is not visible to the candidate (e.g. internal only jobs), the editSpecs API call will fail.

    The exception is when a tracker chain is passed to the API that contains the job access code.

    Usually trackers like this are created by the employer to allow only selected candidates to apply, e.g. 
    allowing only selected employees to apply for a job in a redundancy situation, allowing a late candidate to apply after the job
    even once it has been closed.

    An apply app could also create a tracker like this in order to access the application form for a job which is not visible.

    Always produced as SoT.
     
    The methods are POST solely because parameters may get too long for a GET.
  /fetches:
    /apply:
      /{job}:
        /me:
          post:
            securedBy: [oauth_2_0]
            is: [ editSpecFetcher ]
        /anonymous:
          post:
            securedBy: [oauth_2_0]
            is: [ editSpecFetcher ]
    /register:
      /me:
        post:
          securedBy: [oauth_2_0]
          is: [ editSpecFetcher ]
      /anonymous:
        post:
          securedBy: [oauth_2_0]
          is: [ editSpecFetcher ]


/global:
  description: resources which are global/singletons
  /internalIPMatches:
    /byIP:
      /{ip}:
        get:
          description: |
            Return true if the IP passed in falls within one of the ranges known to be internal. Apps can
            use this to make educated guesses about whether to display, for example, buttons like "employee referral"
            on jobs, depending on whether the user is on the internal network/VPN. Note apps should use this only as
            an indication, and should require the candidate to actually log in and thus be proven an internal
            before unlocking any actual internal behaviour (e.g. allowing the referral to be made).
          responses:
            200:
              body:
                text/plain:
                  example: false
  /jqueryInclude:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get a fragment of HTML with a script tag that pulls in the "current" jquery library, so that it is available to
        any javascript running anywhere in the page. Any page that injects (other than via iframe) HTML from other apps
        must include this, so that the injected apps can use it. When, from time to time, the jquery version is updated, all
        apps therefore receive the update at once.  
      responses:
        200:
          body:
            text/html:
              example: <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"></script>
  /candidateTAndCs:
    get:
      securedBy: [oauth_2_0]
      description: |
        Get the url of the terms and conditions that a candidate must accept before creating an account. Any apps that allow
        candidates to create accounts (such as apply apps) must require the candidate to agree to these.
      responses:
        200:
          body:
            text/plain:
              example: https://example.com/candidate/termsAndConditions.html

/items:
  /toCandidate:
    /me:
      description: |
        *This API is deprecated in favour of GET /candidates/me and will shortly be removed.*
        
        Candidate-visible items held on the candidate themselves, e.g. their own answers when applying for jobs
      type: itemPackagesRead
      get:
        is: [ offerEmbedMeta ] 

/jobBoards:
  description: |
    Job boards are external sites that a tenant may post their jobs to, as opposed to career sites, which are web portals
    showing jobs that exist inside the tenant.
    
  get:
    securedBy: [oauth_2_0]
    description: |
      A rollup of the details of all job boards produced by all apps. SoT.
    responses:
      200:
        body:
          application/json:
            schema: !include ../schemas/jobBoardsForApps.json
            example: !include ../examples/jobBoardsForApps-simple.json
  /forApp:
    get:
      securedBy: [oauth_2_0]
      description: |
        Descriptions of a single job board hosted by a specific app. Non-SoT.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/jobBoard.json
              example: !include ../examples/jobBoard-simple.json
                      
    /status:
      get:
        securedBy: [oauth_2_0]
        description: |
          Get an installed job board's own status as held in the hub, e.g. its setup error message. SoT.
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/jobBoardStatus.json
                example: !include ../examples/jobBoardStatus-simple.json
      patch:
        description: |
          Update an installed job board's own status as held in the hub, e.g. its setup error message. SoT.
          
          Using JSON Merge Patch semantics (https://tools.ietf.org/html/rfc7396).
        body:
          application/merge-patch+json:
            schema: !include ../schemas/jobBoardStatus.json
            example: !include ../examples/jobBoardStatus-simple.json
        responses:
          200:
            description: the patch was successful
            

    /categories:
      description: |
        Job board--defined hierarchical structures used in talent management to categorize job openings, candidates
        and others.
      type: catsget
      /byID:
        /{category}:
          description: category ID 
          /values:
            get:
              securedBy: [oauth_2_0]
              is: [ badrequest ]
              description: |
                 Get root values and the hierarchy of values beneath. Only available nodes are returned.
              responses:
                200:
                  body:
                    application/json:
                      schema: !include ../schemas/categoryValues.json
                      example: !include ../examples/categoryValues-simple.json
      /{app}:
        /mappings:
          post:
            securedBy: [oauth_2_0]
            description: |
              Consumer can pass in a set of categories (the tenant's, e.g. for a job) and then get back a set of job-board
              specific categories and values that are a mapping from the request.
              
              SoT, produced by a mapping app.
            body:
              application/json:
                schema: !include ../schemas/categoriesActual.json
                example: !include ../examples/categoriesActual-simple.json
            responses:
              200:
                description: success
                body:
                  application/json:
                    schema: !include ../schemas/categoriesActual.json
                    example: !include ../examples/categoriesActual-simple.json
                  
/jobs:
  description: |
    These APIs manage position openings (aka vacancies, job openings, etc.) and job templates.

    Job descriptions are formatted using a safe subset of [markdown](https://daringfireball.net/projects/markdown/syntax),
    with individual lines demarcated with \n.
          
    Currently, "safe subset" simply means that angle brackets (&lt; or &gt;) are not allowed.
    Note that this prevents the markdown blockquote syntax from being used in a job description.
    The safe subset rules may be relaxed in the future.

  type: jobsGetter

  post:
    description: |
      Create a job, using the same content type as for updating (JSON Merge Patch semantics (https://tools.ietf.org/html/rfc7396)).

      The id field must not be present in the request body.
        
      The server's instance of the newly created resource, including its id, is passed back in the response.
    body:
      application/merge-patch+json:
        schema: !include ../schemas/jobWrite.json
        example: !include ../examples/jobWrite-create.json
    responses:
      200:
        description: the job was successfully created
        body:
          application/merge-patch+json:
            schema: !include ../schemas/jobRead.json
            example: !include ../examples/jobRead-simple.json
      400:
        description: The request data caused an error. See the response body for more details.
        body:
          application/problem+json:
    
  /open:
    type: jobsGetter
    /byID:
      /{id}:
        type: jobGetter
        /deltaPings:
          post:
            securedBy: [oauth_2_0]
            description: |
              This API is consumed by the ATS some time after changes have been made to a job that was or is open.
                
              In response, the producer (e.g. a job aggregator) will typically re-pull just this specific job, or all jobs.
              
              Non-SoT.
        
        /canApply:
          description: |
            Resource indicating whether a candidate can apply or not for a given job. An ATS might prevent it
            if the candidate has already applied, the job might be closed, or there might be more complex rules.
          /me:
            get:
              description: |
                Find out if the logged in candidate is allowed to apply for this job, and if not why not.
              is: [ trackable ]
              responses:
                200:
                  body:
                    application/json:
                      schema: !include ../schemas/canApply.json
                      example: !include ../examples/canApply-simple.json
    /uploads:
      type: jobsUploader
      /byID:
        /{uploadID}:
          description: the ID of a previously launched jobs bulk upload
          type: uploadStatusGetter
          /deltaPings:
            type: uploadStatusPinger
    /externally:
      type: jobsGetter
      /byID:
        /{id}:
          type: jobGetter
          /deltaPings:
            post:
              securedBy: [oauth_2_0]
              description: |
                This API is consumed by the ATS some time after changes have been made to a job that was or is publicly visible.
                
                In response, the producer (e.g. a job aggregator) will typically re-pull just this specific job, or all jobs.
                
                Non-SoT.
  /template:
    type: jobsGetter
    /byID:
      /{id}:
        type: jobGetter
    /uploads:
      type: jobsUploader
      /byID:
        /{uploadID}:
          description: the ID of a previously launched jobs bulk upload
          type: uploadStatusGetter
          /deltaPings:
            type: uploadStatusPinger
    
          
  /feeds:
    description: Access to publicly visible jobs via XML feeds
    /full:
      get:    
        securedBy: [oauth_2_0]
        description: |
          An XML feed of publicly visible jobs, with full descriptions
        responses:
          200:
            body:
              application/xml:
    /brief:
      get:    
        securedBy: [oauth_2_0]
        description: |
          An XML feed of publicly visible jobs, with abbreviated descriptions
        responses:
          200:
            body:
              application/xml:
  /byID:
    /{job}:
      type: jobGetter
      patch:
        description: |
          Update a job using JSON Merge Patch semantics (https://tools.ietf.org/html/rfc7396). The id field must not be present in the request.
        body:
          application/merge-patch+json:
            schema: !include ../schemas/jobWrite.json
            example: !include ../examples/jobWrite-simple.json
        responses:
          200:
            description: the job was successfully created
            body:
              application/merge-patch+json:
                schema: !include ../schemas/jobRead.json
                example: !include ../examples/jobRead-simple.json
          400:
            description: The request data caused an error. See the response body for more details.
            body:
              application/problem+json:

      /canApply:
        description: |
          *This API is deprecated in favour of GET /jobs/open/byID/{}/canApply and will shortly be removed.*
          
          Resource indicating whether a candidate can apply or not for a given job. An ATS might prevent it
          if the candidate has already applied, the job might be closed, or there might be more complex rules.
        /me:
          get:
            description: |
              Find out if the logged in candidate is allowed to apply for this job, and if not why not.
            is: [ trackable ]
            responses:
              200:
                body:
                  application/json:
                    schema: !include ../schemas/canApply.json
                    example: !include ../examples/canApply-simple.json
      /workflow:
        /candidate:
          get:
            description: |
              *This API is deprecated in favour of GET /jobs/byID/{} and will shortly be removed.*
            responses:
              200:
                body:
                  application/json:
                    schema: !include ../schemas/candidateWorkflow.json
                    example: !include ../examples/candidateWorkflow-simple.json
  /byWorkflow:
    /{workflow}:
      /itemMetas:
        description: |
          Metadata for all items relevant to jobs of this workflow, useful e.g. when creating new jobs
        type: itemMetas
        /byName:
          /{item}:
            type: itemMeta
  /feed:
    get:
      securedBy: [oauth_2_0]
      description: |
        *This API is deprecated in favour of GET /jobs/feeds/full or GET /jobs/feeds/brief and will shortly be removed.*
        
        Get details of the tenant's job feed (an XML-formatted feed of all public jobs)
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/jobFeedDetails.json
              example: !include ../examples/jobFeedDetails-simple.json

/jobSets:
  description: |
    jobAdSets are job advertisements intended for job boards, etc.   
  /uploads:
    post:
      securedBy: [oauth_2_0]
      description: |
        Non-SoT.

        Used to bulk upload active job ads for a tenant to a remote job board. See also APIs to:
        - GET /jobSets/forBoard/{board}
      
        The jobAdSet represents what the caller wants the job ads for the given tenant to be - after the upload
        the jobs for this tenant at that board should match the jobAdSet exactly.
  
        The app producing the API should do something like this:
        - for each job in the jobSet
        - .search for a matching (by code) job in the database, and with status == active 
        - .if the job does not exist, create it (producer might also choose to re-open an old one) 
        - .if the job already exists and has identical details, leave it
        - .if the job exists but has different details, update it
        - for each job that exists but was not found in the jobSet for the org, make it not active or delete it     

        Sending up an empty jobSet deletes or inactivates all jobs for the tenant.
  
        The producer may enforce that job codes are unique within a tenant's open jobs at the board.

        The producer's behaviour need not be atomic - the call might fail after only partially processing the job list, leaving partial changes applied.
        
      body:
        application/json:
          schema: !include ../schemas/jobAdSet.json
          example: !include ../examples/jobAdSet-simple.json
      responses:
        201:
          description: the launch was successful, and the upload is underway
          body:
            application/json:
              schema: !include ../schemas/uploadLaunch.json
              example: !include ../examples/uploadLaunch-jobAds.json
        409:
          description: Conflict - the producer has an existing, incomplete upload operation for this tenant  - See response in RFC 7807 format for more details.
          body:
            application/problem+json:
    /{uploadID}:
      description: the ID of a previously launched job set upload
      type: uploadStatusGetter
      /deltaPings:
        type: uploadStatusPinger
    
  post:
    securedBy: [oauth_2_0]
    description: |
      Non-SoT.

      *This API is deprecated in favour of POST /jobSets/uploads and will shortly be removed.*
            
      Used to bulk upload active job ads for a tenant to a remote job board. See also APIs to:
      - GET /jobSets/forBoard/{board}
      
      The jobSet is assumed to be the definitive set of jobs for the given tenant, i.e. after the call is complete,
      if it all went OK, the jobs for this tenant at that board will match the jobSet exactly.
  
      The behavior of the producer is something like:
      - for each job in the jobSet
      - .search for a matching (by code) job in the database, and with status == active 
      - .if the job does not exist, create it (producer might also choose to re-open an old one) 
      - .if the job already exists and has identical details, leave it
      - .if the job exists but has different details, update it
      - for each job that exists but was not found in the jobSet for the org, make it not active or delete it     

      Therefore, sending up an empty jobSet effectively deletes or inactivates all jobs for the tenant.
  
      The producer may enforce that job codes are unique within a tenant's open jobs at the board.

      The producer's behaviour is not required to be atomic - it is allowed the call could fail
      after only partially processing the job list, leaving partial changes applied.
    body:
      application/json:
        schema: !include ../schemas/jobAdSet.json
        example: !include ../examples/jobAdSet-simple.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/jobSetResponse-simple.json
            
      400:
        description: Error - See response in RFC 7807 format for more details.
        body:
          application/problem+json:
  /forBoard:
    /{app}:
      description: the shortcode of the app that owns the board 
      /{board}:
        description: the ID (an integer) of the board 
        get:
          description: |
            SoT.
          
            Get the job ad set for this board, typically from a mapper type app that tracks which jobs have been posted where. 
          responses:
            200:
              body:
                application/json:
                  schema: !include ../schemas/jobSetJobs.json
        
/landingPage:
  get:
    securedBy: [oauth_2_0]
    description: |
      *deprecated* - use GET /appStatus instead.
      
      Produced by apps that want to allow a user viewing the storefront app to click on the app's icon and be offered a link
      to some page (probably) within the app. e.g. clicking a job board app might go to the front page of the job board.
      
      Probably only consumed by storefront apps.
      
      SoT: non-SoT (each app has their own landing page).
      
      OAuth: client credentials only (if principal-specific behaviour is needed that might happen after SSO on the landing page itself)
       
    responses:
      200:
        body:
          application/json:
            schema: !include ../schemas/landingPage.json
            example: !include ../examples/landingPage-simple.json

/menuedApps:
  description: These APIs are for the universal menu that many apps inject into their UI. 
  /byUser:
    description: These are menued apps that get displayed to users (as opposed to e.g. candidates, though currently there's no universal menu for anyone but users)
    /headHtml:
      get:
        description: |
          Get html head snippet (typically an include of a stylesheet) used to style the html for the universal menu.
              
          The app building the page that embeds the universal menu must insert the results of this API call in its head section.
        responses:
          200:
            body:
              text/html:
                example: some html pulling in stylesheet, javascript etc.
    /me:
      description:
        All APIs beneath here are operating on behalf of the logged in user.
      /jobs:
        /{job}:
          type: menuedAppInquiry
          /asHtml:
            type: universalMenuBody

/orgs:
  description: orgs have the same semantics as a category, but are internal only (not visible to candidates)
  /values:
    get:
      securedBy: [oauth_2_0]
      description: |
         Get root values and the hierarchy of values beneath. Only available nodes are returned.
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/categoryValues.json
              example: !include ../examples/categoryValues-simple.json
    post:
      securedBy: [oauth_2_0]
      description: create or update a single category value. See notes for POST /categories/byID/{}/uploads. The category value must not contain the values element.
      body:
        application/json:
          schema: !include ../schemas/categoryValue.json
          example: !include ../examples/categoryValue-simple.json
    /remapped:
      get:
        description: get unavailable and remapped nodes, using a cursor model
    /uploads:
      type: categoryValuesUploader
      /byID:
        /{uploadID}:
          description: the ID of a previously launched category values bulk upload
          type: uploadStatusGetter
          /deltaPings:
            type: uploadStatusPinger
    /byID:
      /{id}:
        get:
          securedBy: [oauth_2_0]
          description: get a single category value, even if it is unavailable (i.e. unlike GET /categories/byID/{}/values) 
          responses:
            200:
              body:
                application/json:
                  schema: !include ../schemas/categoryValue.json
                  example: !include ../examples/categoryValue-simple.json
            404:
        /deltaPings:
          post:
            securedBy: [oauth_2_0]
            description: Tell any app that cares that a category value has changed

/panels:
  /toUser:
    /me:
      /jobs:
        /{job}:
          description: Panels shown to a user about a specific job  
          type: appsPanels
          /byApp:
            type: appPanel
  /toCandidate:
    /me:
      /home:
        description: Panels shown to a candidate about themselves, i.e on a logged in home page  
        type: appsPanels
        /byApp:
          type: appPanel

/postings:
  description: Postings to job boards for individual jobs
  /byID:
    /{id}:
      /appDetails:
        patch:
          securedBy: [oauth_2_0]
          description: |
            Update data on the posting that is set by the app, rather than the hub. Currently this is only the preview link.
            
            The posting must belong to the API consumer (i.e. the job board app).

            SoT.
          body:
            application/json:
              schema: !include ../schemas/postingWriteByApp.json
              example: !include ../examples/postingWriteByApp-simple.json

        
      /tenantDeltaPings:
        post:
          securedBy: [oauth_2_0]
          description: |
            Alerts job board apps that a posting has been created, or the tenant- or app-supplied fields on the posting (i.e. not the preview link)
            have been updated. The entire posting object is passed in the API request.

            Non-SoT.

          body:
            application/json:
              schema: !include ../schemas/postingRead.json
              example: !include ../examples/postingRead-simple.json

    
/trackers:
  description: |
    A tracker represents a single sourcing event (social sharing, automated job alert, etc.).
    
    Trackers are organized into trees. The path from a single leaf to the trunk of the tree represents the chain
    of sourcing events, for example that led a candidate to apply. Each tracker can append meta information (e.g. the employee
    making an employee referral) to the chain.
    
    Trackers can be passed by id into tracker-aware APIs such as POST /candidates.
    
    The producers of APIs that create trackers must:
    - attach the consuming tenant and consuming app (from the incoming OAuth token) onto the
    tracker itself, so that later access to the tracker can be restricted to the app that created it
    - reuse rather than create trackers when one exists with identical:
      - details (e.g. for a session tracker, the user's IP)
      - consumer
      - parent tracker
     
  post:
    securedBy: [oauth_2_0]
    description: |
      Create a root tracker (one with no parent).
    body:
      application/json:
        schema: !include ../schemas/tracker.json
        example: !include ../examples/tracker-createSessionTracker.json
    responses:
      201:
        description: a tracker was created
        body:
          application/json:
            schema: !include ../schemas/meta.json
            example: !include ../examples/meta-simple.json
  /byID:
    /{id}:
      /chain:
        get:
          securedBy: [oauth_2_0]
          description: |
            Get this tracker, its parent tracker, and so on to the root of the tree.
          responses:
            200:
              body:
                application/json:
                  schema: !include ../schemas/trackers.json
                  example: !include ../examples/trackers-simple.json
      /trackers:          
        post:
          securedBy: [oauth_2_0]
          description: |
            Create a tracker and attach to the specified parent.
          body:
            application/json:
              schema: !include ../schemas/tracker.json
              example: !include ../examples/tracker-createMailoutTracker.json
          responses:
            201:
              description: a tracker was created
              body:
                application/json:
                  schema: !include ../schemas/meta.json
                  example: !include ../examples/meta-simple.json


/socialNetworks:
  get:
    description: Get the social networks that are enabled for this tenant 
    securedBy: [oauth_2_0]
    responses:
      200:
        body:
          application/json:
            schema: !include ../schemas/socialNetworks.json
            example: !include ../examples/socialNetworks-simple.json

/time:
  get:
    securedBy: [oauth_2_0]
    description: |
      Get the current time, in ISO8601 format. This API is only intended for basic app testing, and because of API latency, is unlikely to be of any practical use.
    responses:
      200:
        body:
          text/plain:
            example: 2017-07-24T23:15:42+00:00

/workflows:
  /candidate:
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/candidateWorkflows.json
              example: !include ../examples/candidateWorkflows-simple.json
    /byID:
      /{id}:
        get:
          responses:
            200:
              body:
                application/json:
                  schema: !include ../schemas/candidateWorkflow.json
                  example: !include ../examples/candidateWorkflow-simple.json
        /deltaPings:
          post:
            securedBy: [oauth_2_0]
            description: |
              The main ping for any changes to a workflow. Noisy, i.e. other apps need to store previous state to work out what has actually changed.
            
              Non-SoT.

            body:
              application/json:
                schema: !include ../schemas/deltaPing.json
                example: !include ../examples/deltaPing-simple.json
    
/users:
  description: |
    Users in the system, who may be recruiters or managers.

  type: usersGetter
  post:
    description: |
      Create a user, using the same content type as for updating (JSON Merge Patch semantics (https://tools.ietf.org/html/rfc7396)).

      The id field must not be present in the request body.
        
      The server's instance of the newly created resource, including its id, is passed back in the response.
    body:
      application/merge-patch+json:
        schema: !include ../schemas/userWrite.json
        example: !include ../examples/userWrite-simple.json
    responses:
      200:
        description: the user was successfully created
        body:
          application/merge-patch+json:
            schema: !include ../schemas/userRead.json
            example: !include ../examples/userRead-simpleManager.json
      400:
        description: The request data caused an error. See the response body for more details.
        body:
          application/problem+json:
  /byID:
    /{id}:
      type: userGetter
      patch:
        description: |
          Update a user using JSON Merge Patch semantics (https://tools.ietf.org/html/rfc7396). The id field must not be present in the request.
        body:
          application/merge-patch+json:
            schema: !include ../schemas/userWrite.json
            example: !include ../examples/userWrite-simple.json
        responses:
          200:
            description: the user was successfully updated
            body:
              application/merge-patch+json:
                schema: !include ../schemas/userRead.json
                example: !include ../examples/userRead-simpleManager.json
          400:
            description: The request data caused an error. See the response body for more details.
            body:
              application/problem+json:

  /uploads:
    type: usersUploader
    /byID:
      /{uploadID}:
        description: the ID of a previously launched users bulk upload
        type: uploadStatusGetter
        /deltaPings:
          type: uploadStatusPinger
      
  /active:
    type: usersGetter
    /byID:
      /{id}:
        type: userGetter
    /managers:
      type: usersGetter
      /byID:
        /{id}:
          type: userGetter
    /recruiters:
      type: usersGetter
      /byID:
        /{id}:
          type: userGetter
  
      
