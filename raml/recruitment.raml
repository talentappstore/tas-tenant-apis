#%RAML 0.8
---
title: TAS recruitment
baseUri: http://talentappstore.com/{version}
version: v1


securitySchemes:  !include securitySchemes.yml
traits: !include traits.yml


/applications:
  /{id}:
    /bySourcingApp:
      /{producer}:
        /{id}:
          /deltaPings:
            post:
              description: |
                A ping for any changes to a job application, but which is only sent to the application that sourced the
                application (i.e., that owns the campaign tracker attached to the application).
                Probably only non-SoT.
    /deltaPings:
      description: |
        The main ping for any changes to a job application.
        Probably only non-SoT.
    /tracker:
      get:
        description: |
          Get the tracker, if any, associated with this application. This is fixed at the time that application is made.
    /status:
      get:
        description: |
          Get the bucket and sourcingBucket for the application. SourcingBucket is from a hard-coded set of values such
          as "interview", "offer", "pre-screen", etc.
    /candidate:
      get:
        description: Get the candidate for this application
    /job:
      get:
        description: Get the job opening for this application
    /items:
      get:
      /candidateOwned:
        get:
          description: Get all candidateOwned items for this application
          body:
            application/json:
              schema: !include ../schemas/existingItems.json
              example: !include ../examples/existingItems-simple.json
        /{item}:
          get:
            description: Get a specific candidateOwned item for this application
            body:
              application/json:
                schema: !include ../schemas/existingItem.json
                example: !include ../examples/existingItem-simple.json
      /internalOwned:
        get:
          description: Get all internalOwned items for this application
          body:
            application/json:
              schema: !include ../schemas/existingItems.json
              example: !include ../examples/existingItems-simple.json
        /{item}:
          get:
            description: Get a specific internalOwned item for this application
            body:
              application/json:
                schema: !include ../schemas/existingItem.json
                example: !include ../examples/existingItem-simple.json
      /internalShared:
        get:
          description: Get all internalShared items for this application
          body:
            application/json:
              schema: !include ../schemas/existingItems.json
              example: !include ../examples/existingItems-simple.json
        /{item}:
          get:
            description: Get a specific internalShared item for this application
            body:
              application/json:
                schema: !include ../schemas/existingItem.json
                example: !include ../examples/existingItem-simple.json
      /eeo:
        get:
          description: Get all eeo items for this application
          body:
            application/json:
              schema: !include ../schemas/existingItems.json
              example: !include ../examples/existingItems-simple.json
        /{item}:
          get:
            description: Get a specific eeo item for this application
            body:
              application/json:
                schema: !include ../schemas/existingItem.json
                example: !include ../examples/existingItem-simple.json
        
  /bySourcingApp:
    /{consumer}:
      /{id}:
        /sourcerDetails:
          get:
            description: |
              Get a sanitised and basic set of information for a job application, which the consumer is entitled to
              by virtue of sourcing the application (i.e., owning the campaign tracker attached to the application).
  /byCandidate:
    /{candidateID}:
      /byOpening:
        /{openingID}:
          get:
            description: get the id of the application (if any)
          
/candidates:
  description:
    Candidates are people who are in the tenant's talent world, maybe because they applied for an
    opening, registered in the database, were imported from some other system, etc.
    Candidate records may be "owned" (have a value for {E} and {N}). e.g. an actual candidate logging in through LinkedIn, or unowned,
    in which case they have no {E}/{N} values. Owned candidates may use an identity leap IdP.
  /{N}:
    description: |
      The name ID of the candidate.
    get:
      description: |
        Get the ID (database primary key) of ourselves (the currently logged in principal, who must be of principal type 'candidate').
        The ID is often required as a parameter for other APIs.
        Can only be called for the current logged in user, using their own name ID.
  post:
    securedBy: [oauth_2_0]
    description: |
      Create a candidate possibly including job applications, via an edit operation, prepared to conform to an edit spec.
      
      See separate design document for detailed information on the request body.

      The producer must run all uploaded files through OWASP security tests:
      - extension matches actual file type
      - virus check
      - etc.

      Candidate type is not passed - instead the producer should identify candidate type (e.g. internal)
      by looking for the relevant role in the incoming OAuth token.
  
      The producer must not blindly apply the incoming data. It must first generate an editSpec for the candidate,
      and then assert that the incoming data is a subset of what the editSpec allows/requires. This prevents
      attacks where the consumer writes to any data item for example.
      
    body:
      application/json:
        schema: !include ../schemas/candidateEdit.json
        example: !include ../examples/candidateEdit-simple.json
  /{id}:
    get:
      description: |
        Get general information about the candidate including notifications (subscribe y/n)
    /deltaPings:
      description: |
        The main ping for any changes to a candidate, other than the html resume, which has its own delta ping.
        Only produced as non-SoT.
      post:
    /roles:
      get:
        description: get the roles (e.g. "internal") that this candidate holds (TODO at least as far as this system knows? who uses this?) 
    /preScreens:
      /{consumer}:
        /{id}:
          /request:
            get:
              description: Get details of a screening request
              body:
                application/json:
                  example: !include ../examples/screenRequest-simple.json
          /responses:
            /{seq}:
            /latest:
              post:
                description: Update the response to a screening request
                body:
                  application/json:
                    example: !include ../examples/screenResponse-simple.json
              /candidateFace:
                /links:
                  get:
                    description: get the candidate viewable links from the screening (if any)
    /vcard:
      get:
        description: candidate contact details, in the form described by rfc7095
    /resume:
      /meta:
        get:
          description: get metadata about the candidate's resume (size, filename, etc.)
          responses:
            200:
              body:
                application/json:
                  schema: !include ../schemas/fileMeta.json
                  example: !include ../examples/fileMeta-simple.json
      /asBinary:
        get:
          is: [ document_asStream ]
      /asHtml:
        get:
          description: get an html version of the candidate's resume
        /deltaPings:
          description: |
            A separate delta ping from the main candidate one, since managing the html version may be done delayed by a downstream app.
            Probably only useful as non-SoT.
          post:        
    /video:
      get:
        description: get the ID of the candidate's video as held in the video app
    /voiceMessage:
       get:
       /entryURL:
         get:
           description: |
             Get the url of a small iframe-able web page that will capture a voice message for this candidate. Typically
             called by an apply UI.
    /items:
      /candidateOwned:
        get:
          description: Get all candidateOwned items for this candidate
          body:
            application/json:
              schema: !include ../schemas/existingItems.json
              example: !include ../examples/existingItems-simple.json
        /{item}:
          get:
            description: Get a specific candidateOwned item for this candidate
            body:
              application/json:
                schema: !include ../schemas/existingItem.json
                example: !include ../examples/existingItem-simple.json
      /internalOwned:
        get:
          description: Get all internalOwned items for this candidate
          body:
            application/json:
              schema: !include ../schemas/existingItems.json
              example: !include ../examples/existingItems-simple.json
        /{item}:
          get:
            description: Get a specific internalOwned item for this candidate
            body:
              application/json:
                schema: !include ../schemas/existingItem.json
                example: !include ../examples/existingItem-simple.json
      /internalShared:
        get:
          description: Get all internalShared items for this candidate
          body:
            application/json:
              schema: !include ../schemas/existingItems.json
              example: !include ../examples/existingItems-simple.json
        /{item}:
          get:
            description: Get a specific internalShared item for this candidate
            body:
              application/json:
                schema: !include ../schemas/existingItem.json
                example: !include ../examples/existingItem-simple.json
      /eeo:
        get:
          description: Get all eeo items for this candidate
          body:
            application/json:
              schema: !include ../schemas/existingItems.json
              example: !include ../examples/existingItems-simple.json
        /{item}:
          get:
            description: Get a specific eeo item for this candidate
            body:
              application/json:
                schema: !include ../schemas/existingItem.json
                example: !include ../examples/existingItem-simple.json
    /categories:
      get:
        description: get the categories for this candidate
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/categoriesActual.json
                example: !include ../examples/categoriesActual-simple.json
    /latestApplyTracker:
      get:
        description: |
          The tracker (if any) that was passed in when this candidate last applied for a job (i.e. a call to POST /candidates
          was made with a job specified). When a candidate applies for multiple jobs over time, this helps understand what last
          drew them to the site.
    /applications:
      /{job}:
        /items:
          /candidateOwned:
            get:
              description: Get all candidateOwned items for this application
            /{item}:
              get:
                description: Get a specific candidateOwned item for this application
          /internalOwned:
            get:
              description: Get all internalOwned items for this application
            /{item}:
              get:
                description: Get a specific internalOwned item for this application
          /internalShared:
            get:
              description: Get all internalShared items for this application
            /{item}:
              get:
                description: Get a specific internalShared item for this application
          /eeo:
            get:
              description: Get all eeo items for this application
            /{item}:
              get:
                description: Get a specific eeo item for this application
        /source:
          get:
            description: a tracker, as passed in to the edit
    /stars:
      /forOpenings:
        /{id}:
          get:
            description: Get the candidate's stars against a specific opening, perhaps inherited from the opening's master

  /recruiterFaces:
    /searches:
      post:
        securedBy: [hmac]
        description: |
          Search candidates, returning recruiter-facing details.
          The method is a POST solely because the size and number of parameters might get too large for a GET.
          withResume - if present, only return candidates with (if true) or without (if false) an attached resume
        body:
          application/json:
            schema: !include ../schemas/candidates.json
            example: !include ../examples/candidates-simple.json
    /{id}:
      get:
        description: |
          Return recruiter-facing details for a specific candidate. e.g do not contact flag

/categories:
  description: |
    Tenant-defined hierarchical structures used in talent management to categorize job openings, candidates
    and others. Includes details of inactivated nodes.
  get:
    description: |
      Fetch list of categories
    responses:
      200:
        body:
          application/json:
            schema: !include ../schemas/categories.json
            example: !include ../examples/categories-simple.json
  post:
    description: Create a single category (without any values)
    body:
      application/json:
        schema: !include ../schemas/category.json
        example: !include ../examples/category-simple.json
    
  /{id}:
    description: category ID 

    post:
      description: Update a single category, not including its values
      body:
        application/json:
          schema: !include ../schemas/category.json
          example: !include ../examples/category-simple.json
          
    delete:
      description: Delete a category, along with all of its values
      
    /values:
      get:
        description: |
           Get root values and the hierarchy of values beneath
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/categoryValues.json
                example: !include ../examples/categoryValues-simple.json
        
      patch:
        description: |
          Merge in an array of root values. TODO: what happens when:
          - the merge specifies a different location for an existing node?
        body:
          application/json:
            schema: !include ../schemas/categoryValues.json
            example: !include ../examples/categoryValues-simple.json
        
      post:
        description: |
           Arbitrarily set or change the root values for this category.
        body:
          application/json:
            schema: !include ../schemas/categoryValues.json
            example: !include ../examples/categoryValues-simple.json

      /{id}:
        get:
          description: Get the child values for the given value
        delete:
          description: delete this node and its child nodes
        post:
          description: edit details of this node, including its parent
        /values:
          get:
            description: Get the array of sub-trees attached to this value
          patch:
            description: Merge in an array of child values
          post:
            description: |
               Arbitrarily set or change the child values for this value. Values are removed from their previous
               parent (node or category)
        /acquires:
          /{acquiree}:
            post:
              description: acquire all of the child nodes of the acquiree, then delete the acquiree node


/editSpecs:
  description: |
    Major changes to a candidate's data, such as vcard, eeo items, candidate items, categories, etc., must obey an
    edit spec. Classic case is a job application form.
    See <a href="../doc/candidateEditSpec-notes.html">detailed information on edit specs</a>.
  /me:
    description: Don't cache responses from APIs with /me/ in them
    /applyOrRegister:
      description: This API gets editSpecs for a candidate to apply for a job, register or edit their categories
      /fetches:
        post:
          securedBy: [oauth_2_0]
          description: |
            If an anonymous OAuth token is passed, fetch the edit spec that is safe to display to
            the public (or 403 Forbidden if the intent contains an internal-only job)

            If an "on behalf" OAuth token is passed, fetch the edit spec that is suitable for
            the candidate who is logged in, and who may or may not have a row in the candidates table (e.g.
            special questions for an internal candidate or one who found the job via employee referral)

            The editSpec returned by this API can only ever contain candidate and eeo items
            in its itemsRule and any job itemsRules.  
            
            Always produced as SoT. 
            
            The method is a POST just because parameters may get too long for a GET.
          body:
            application/json:
              schema: !include ../schemas/intent.json
              example: !include ../examples/intent-apply.json
          responses:
            200:
              body:
                application/json:
                  schema: !include ../schemas/candidateEditSpec.json
                  example: !include ../examples/candidateEditSpec-apply.json
            
/jobs:
  description: |
    Position openings aka vacancies, job openings, etc. 
  /recruiterFaces:
  
    description: |
      APIs that present information relevant to someone who is acting as a recruiter. Normally when these APIs are called as OAuth,
      the logged in principal would be a user, session decorated as a recruiter.          
    post:
      description: Post a new opening as a recruiter, perhaps using another opening as a template, making sure to specify owner and status
    /{id}:
      get:
        description: Get recruiter-facing details for a specific opening by ID. When called as OAuth, the opening must be visible to the recruiter.
      post:
        description: Update an existing opening as a recruiter

  /searches:
    post:
      description: |
        Search jobs, returning only id, title and code (if present) for each.

        When called by a candidate, there is no special filtering based on "open to internal" rules on the opening vs. the viewing
        candidate's own state. That sort of hyperdetail gets in the way of sending special candidate direct
        links for them to apply (e.g. after an opening has closed, or to allow a special external applicant through to an internal opening).
        
        The method is a POST solely because the size and number of parameters might get too large for a GET.
        
        Auth:
        When called as an OAuth API, the recruiter parameter must be present, and must be set to the logged in recruiter. 
      body:
        application/json:
          schema: !include ../schemas/jobSearches.json
          example: !include ../examples/jobSearches-simple.json
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/jobs.json
              example: !include ../examples/jobs-simple.json
      
  /{id}:
    get:
      description: |
        Get common details of a specific job opening
      responses:
        200:
          body:
            application/json:
              schema: !include ../schemas/job.json
              example: !include ../examples/job-simple.json

    /categories:
      get:
        description: Fetch the job's category values as seen by candidates. If any values are inactivated, then the tree will still be normalised.
        responses:
          200:
            body:
              application/json:
                  schema: !include ../schemas/categoriesActual.json
                  example: !include ../examples/categoriesActual-simple.json

    /widgetState:
      /me:
        /{consumer}:
          description: |
            The name of the app that wants to know whether to render its widget or not
          get:
            description: |
              Called by apps that are able to present candidate-facing buttons (like "apply", "refer") on job openings, and want to
              know for a specific opening and candidate, whether to display themselves or not. This sort of decision might be made
              by the ATS.
                
              The OAuth token may be for a specific candidate, which will allow the API producer to
              make a fine-grained decision, possibly looking into the TAS session, or an anonymous one
              (in which case some default decision will be made). 
            responses:
              200:
                body:
                  application/json:
                    example: |
                      { "display": true }
    /widgetHtml:
      description: |
        Resource served up by apps that want to insert an html widget into a web page displaying this job, for example:
        - an apply now button displayed to a candidate
        - a menu panel displayed to a recruiter
      /candidates:
        /me:
          get:
            description:
              Get a button type widget for display on the candidate facing page for a job opening.
              If called anonymously, the producer will pass back some default which is applicable to
              public job seekers. If called with a candidate identified, the producer will likely consult
              the TAS session and perhaps some business data such as whether the candidate has applied for
              the opening already to make its decision.
            queryParameters:
              tasTracker:
                type: integer
                description: |
                  A tracker that the widget can make use of (candidates only).
                example: 16548354764
                required: false
      /recruiters:
        /me:
          get:
            description:
              Get a card type widget for display to the logged in recruiter for a job opening.
              The producer will likely consult the TAS session and perhaps some business data
              such as the recruiter's area to make its decision.                
    /candidateFaces:
      /{id}:
        /deltaPings:
          post:
            description: |
              Send notification of a change to the candidate-facing details of a job opening.
          /toActive:
            post:
              description: |
                Send notification of a change to the candidate-facing details of a job opening, specifically
                that the job opening has become newly active. Useful to feed something like a mobile job notification system,
                which does not care about all of the micro delta pings for an opening, just when it becomes newly active. Such
                a system would need to do its own tests as to whether the opening was visible to any given candidate (i.e.,
                it might be only visisble to internal candidates)
    /preScreens:
      /{producer}:
        /{id}:
          /deltaPings:
            post:
              description: Alert a pre-screening app that a new screening has been requested
                            
  /public:
    /searches:
      post:
        is: [ tasCollection: { orderingProperties: id, filterCapabilities: "Gt on id", maxTop: 20 }, tasItem: { defaultSelectList: "id" } ]
        description: |
          Search job openings, returning id, title and code (if present) for each, but only for job openings that are publicly
          available, i.e. where availableExternally == true AND externalCloseDate is null or in the future.
           
          See description for POST /jobs/searches.
           
          The method is a POST solely because the size and number of parameters might get too large for a GET.
        body:
          application/json:
            schema: !include ../schemas/jobSearches.json
            example: !include ../examples/jobSearches-simple.json
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/jobs.json
                example: !include ../examples/jobs-simple.json
    /{id}:
      get:
        description: |
          Get common details of a specific job opening, but only if it is publicly visible, i.e.
          where availableExternally == true AND externalCloseDate is null or in the future.
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/job.json
                example: !include ../examples/job-simple.json
  
/trackers:
  description: |
    A tracker represents a single sourcing event (social sharing, automated job alert, etc.). Trackers are organized into trees.
    The path from a single leaf to the trunk of the tree represents the chain of sourcing events, for example that led a candidate
    to apply. Each tracker can append meta information (e.g. the employee making an employee referral) to the chain. Trackers can
    be passed by id into tracker-aware APIs such as POST /candidates.
  /{id}:
    /chain:
      get:
        description: |
          Get this tracker, its parent tracker, and so on to the root of the tree.
        responses:
          200:
            body:
              application/json:
                schema: !include ../schemas/trackers.json
                example: !include ../examples/trackers-simple.json
    /trackers:          
      /{CT}:
        description: Consuming tenant
        /{CAD}:
          description: Consuming app developer
          /{CA}:
            description: Consuming app
            post:
              description: |
                Create a tracker and attach to the specified parent. The implementation MUST check that the values passed in
                for {CAT}/{CAD}/{CA} match the actual consumer of the API, and disallow the call if not.
              body:
                application/json:
                  schema: !include ../schemas/tracker.json
                  example: !include ../examples/tracker-createMailoutTracker.json
  /{CT}:
    description: Consuming tenant
    /{CAD}:
      description: Consuming app developer
      /{CA}:
        description: Consuming app
        post:
          description: |
            Create a base tracker (one with no parent). The implementation MUST check that the values passed in
            for {CAT}/{CAD}/{CA} match the actual consumer of the API, and disallow the call if not.
          body:
            application/json:
              schema: !include ../schemas/tracker.json
              example: !include ../examples/tracker-createSessionTracker.json



/recruiters:
  description: |
    Recruiters are HR professionals or recruitment specialists who bring talent into the organization.
    To perform their role, recruiters are trusted with a high degree of access to sensitive information such as salaries,
    performance management records, etc.

  /byEN:    
    /{E}:
      /{N}:
        get:
          description: |
            Get the ID of the recruiter role holding for ourselves (the currently logged in principal, who must be of principal type 'user',
            session decorated as being a recruiter, with a row in the SoT system for recruiters).
            Calls by apps, typically immediately after a user authenticates in, to get the id of the recruiter role holding.
             
            since that is the time to perform identity leap. 
          queryParameters:
            email:
              type: string
              description: |
                The verified email address of the logged in recruiter. The endpoint SHOULD use this to identify opportunities for
                "identity leap", e.g. when someone with an existing user record authenticated by LinkedIn clicks to log in with Google
                instead, identity leap allows them to switch their {E} and {N} so that henceforth they log in via Google.
              
                The endpoint's logic will be something like:
                - does a user row exist with {E}/{N}?
                - if so, then return the ID of the user's recruiter role holding if they have one, otherwise http 404
                - if not, does any user row exist with {E} and {N} being not null, and having the matching email address?
                - if so, does the existing {E} allow "identity leap away from"? (i.e., is it a non-attribute supplying idp)?
              
                
                There are two classes of idp:
                - attribute suppliers:
                   - corporate SSO
                   - bootstrap idp
                - non-attribute suppliers:
                   - backdoor idp (these may have attributes but can inject them via login listening on email match)
                   - social logins (e.g. Google, LinkedIn)
                   - email idp
                   - common SAML (e.g. RealMe)
                
                Identity leap is by default not allowed *away* from attribute suppling idps, since leaping away means losing access
                to the idp-supplied attributes, which may hold vital authorization information. Also, corporate SSO has
                been put in place for strong security reasons - most corporates would not want it supplanted by other login mechanisms,
                e.g. login with Google.
                
                The only case for turning on "allow identity leap away from" on a corporate idp is probably when that idp is being retired in favour of
                a new one - a fringe case we aren't going to handle.
                
                Leaping *to* attribute supplying idps is powerful - e.g., when the tenant has an existing database of password or Google (or whatever) protected
                users, and they install a corporate SAML idp, they can disable the existing login methods (which implies TAS needs a disabled flag) and then
                each user will be forced to switch authentication to the SAML when they next attempt log in.
                
                Session decorators should normally decorate based on email address rather than {E}/{N}.
                
                This allows the user to swap login mechanisms (e.g. from email to Google) and keep their entitlements.
                
                HOW? WHY NECESSARY? Step by step!
                
                Idp-specific rules can not be applied to non-attribute suppliers. (e.g. can't make *@acme.com an internal when logging
                in through LinkedIn, but not Google). Instead, rules must be applied either to all non-attribute supplying idps, or to specific attribute supplying idps.
              
                TODO: expand on this, considering:
                - how to broadcast the leap to all apps that have a user database so they can fix their own records for the person

                /m/candidates/byEmail/{email}/identityLeaps:
              
                - how/whether to cleanup the email IdP if that is the IdP we are leaping from (similar problem to
                allowing candidates to delete their own records)
                - likewise when we leap away from the backdoor idp, we probably can't delete the record, but we need to cleanse it
                of password information
              example: fred@acme.com
              required: false
            
      post:
        description: |
          Self-provision a recruiter row for the logged in user (who must have been session decorated as a recruiter) 
  post:
    description: |
      Create a recruiter, along with a user, or designate an existing user as being a recruiter. When creating the user,
      the identity fields need to be set, typically by:
      - setting {E} to the email IdP, {N} to their email; OR
      - setting {E} to corporate IdP, {N} to incoming {N}
  /{id}:
    post:
      description: update an existing recruiter and/or their user ('s vcard)
    /deltaPings:
      post:
        description: |
          Alert interested apps that recruiter CRUD has happened. e.g. one might send welcome messages
          to new recruiters.
          Probably only useful as non-SoT. 
    /userFace:
      get:
        description: get the user-facing details for a recruiter (active flag, user ID, org details, etc.)
    /user:
      /vcard:
        get:
          description: |
            Get contact details of the recruiter's user record user in the form described by rfc7095.
            Users are people who are more or less inside the organization. Users may be or take on the role
            of other types such as recruiter.
            When called as OAuth, the target must be the logged in user, or one of their coRecruiters.
  /userFaces:            
    /searches:
      post:
        description: |
          Search recruiters, returning user-facing details.
          When called as OAuth, the logged in recruiter must be passed as a parameter, and the results
          will include only recruiters that the user can see (maybe they are in the same team, or work for the same organization).
          The method is a POST solely because the size and number of parameters might get too large for a GET.



/preScreens:
  /{producer}:
    /types:
      get:
        description: Get details of all of the screening types available to the tenant from this app
        body:
          application/json:
            example: !include ../examples/screeningTypes-simple.json



/voiceMessageUploads:
  /{captureID}:
    /lock:
      post:
        description: |
          Lock the upload with the given capture id if it exists. e.g:
          - an apply app makes up a capture id and passes it to the voice recording app
          - some time later (e.g. when candidate clicks submit) the apply app returns to lock the recording (if the candidate made one)
          - if exists, the apply app passes the capture id to the ats in POST /candidates
          - the ats takes over responsibility for deleting the message 
          - the ats app deletes any existing message
          - and stores the new message id
    delete:
      description: |
        Delete the given recording if we have it currently locked.  

/videoUploads:
  /{captureID}:
    /lock:
      get:
        description: |
          See voiceMessageRecordings.
    delete:
      description: |
        See voiceMessageRecordings.



